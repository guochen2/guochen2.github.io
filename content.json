{"meta":{"title":"斑驳记忆","subtitle":"斑驳记忆","description":"爱直至成伤","author":"Guo","url":"https://guochen2.github.io","root":"/"},"pages":[{"title":"關於自己","date":"2020-02-16T16:00:00.000Z","updated":"2020-11-23T13:46:49.754Z","comments":false,"path":"about/index.html","permalink":"https://guochen2.github.io/about/index.html","excerpt":"","text":"Life is an attitude —— guo Name: GuoAge: 29Gender: maleAddress: BeiJingGithub: https://github.com/guochen2Blog: https://guochen2.github.io/ Blog: https://guochen2.gitee.io/"},{"title":"分類","date":"2018-01-04T16:00:00.000Z","updated":"2020-11-23T13:46:49.756Z","comments":false,"path":"categories/index.html","permalink":"https://guochen2.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2018-01-04T16:00:00.000Z","updated":"2020-11-23T13:46:49.758Z","comments":true,"path":"comment/index.html","permalink":"https://guochen2.github.io/comment/index.html","excerpt":"","text":"有什么想说的? 在下面留言.."},{"title":"標籤","date":"2018-01-04T16:00:00.000Z","updated":"2020-11-23T13:46:49.796Z","comments":false,"path":"tags/index.html","permalink":"https://guochen2.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"固定长度验证码训练识别","slug":"ai/固定长度验证码训练识别","date":"2021-07-01T11:49:09.000Z","updated":"2021-07-01T12:28:19.804Z","comments":true,"path":"2021/07/01/ai/固定长度验证码训练识别/","link":"","permalink":"https://guochen2.github.io/2021/07/01/ai/%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AE%AD%E7%BB%83%E8%AF%86%E5%88%AB/","excerpt":"","text":"训练开源地址https://github.com/kerlomz/captcha_trainer/tree/cnn 训练集与测试集样本可以先做灰度处理，能提高识别率 训练集数据尽量多，注意文件命名规范 值_任意名称.png 测试集文件个数需要大于500个 训练配置config.yaml# Device: [gpu:0, cpu:0] The default device is GPU.# - requirement.txt - GPU: tensorflow-gpu, CPU: tensorflow# - If you use the GPU version, you need to install some additional applications.# TrainRegex and TestRegex: Default matching apple_20181010121212.jpg file.# TrainsPath and TestPath: The local absolute path of your training and testing set.System: NeuralNet: &#x27;CNNNet&#x27; Device: &#x27;cpu:0&#x27; DeviceUsage: 0.9 TrainsPath: &#x27;D:\\train\\1\\&#x27; TrainRegex: &#x27;.*?(?=_.*\\.)&#x27; TestPath: &#x27;D:\\train\\2\\&#x27; TestRegex: &#x27;.*?(?=_.*\\.)&#x27;# SavedStep: A Session.run() execution is called a Step,# - Used to save training progress, Default value is 100.# TestNum: The number of samples for each test batch.# - A test for every saved steps.# CompileAcc: When the accuracy reaches the set threshold,# - the model will be compiled together each time it is archived.# - Available for specific usage scenarios.# EndAcc: Finish the training when the accuracy reaches [EndAcc*100]%.# EndStep: Finish the training when the step is greater than the [-1: Off, EndStep &gt;0: On] step.# LearningRate: Find the fastest relationship between the loss decline and the learning rate.Trains: SavedStep: 100 TestNum: 500 CompileAcc: 0.9 EndAcc: 0.95 EndStep: -1 LearningRate: 0.001 model.yaml# Convolution: The number of layers is at least 3.# - The number below corresponds to the size of each layer of convolution.# Provide flexible neural network construction,# Adjust the neural network structure that suits you best# [Convolution, Pool, Optimization: &#123;Dropout&#125;]CNNNet: Layer: - Convolution: 32 - Pool: [1, 2, 2, 1] - Optimization: Dropout - Convolution: 64 - Pool: [1, 2, 2, 1] - Optimization: Dropout - Convolution: 64 - Pool: [1, 2, 2, 1] - Optimization: Dropout ConvCoreSize: 3 FullConnect: 1024# ModelName: Corresponding to the model file in the model directory,# - such as YourModelName.pb, fill in YourModelName here.# CharSet: Provides a default optional built-in solution:# - [ALPHANUMERIC, ALPHANUMERIC_LOWER, ALPHANUMERIC_UPPER, NUMERIC]# - Or you can use your own customized character set like: [&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;].# ImageChannel: [1 - Gray Scale, 3 - RGB].# CharLength: Captcha Length.Model: ModelName: GuoModel ImageChannel: 1 CharLength: 5 CharSet: NUMERIC# Magnification: [ x2 -&gt; from size(50, 50) to size(100,100)].# OriginalColor: [false - Gray Scale, true - RGB].# Binaryzation: [-1: Off, &gt;0 and &lt; 255: On].# Smoothing: [-1: Off, &gt;0: On].# Blur: [-1: Off, &gt;0: On].# Resize: [WIDTH, HEIGHT].Pretreatment: Magnification: 0 OriginalColor: false Binaryzation: 240 Smoothing: 3 Invert: false Blur: 5# Resize: [160, 60] 开始训练python3 trains.py 打包好的gpu exe训练程序，可配置好后直接cmd运行链接：https://pan.baidu.com/s/1rvZ4FBJ94iC9rZJ0yQtyvg提取码：my4i 部署识别开源地址https://github.com/kerlomz/captcha_platform/tree/cnn注意config.py有一行错误 可能会导致运行异常 需要注释掉 model.yaml# Device: [gpu:0, cpu:0]System: Device: &#x27;gpu:0&#x27;# ModelName: Corresponding to the model file in the model directory,# - such as YourModelName.pb, fill in YourModelName here.# CharSet: Provides a default optional built-in solution:# - [ALPHANUMERIC, ALPHANUMERIC_LOWER, ALPHANUMERIC_UPPER, NUMERIC]# - Or you can use your own customized char set like: [&#x27;a&#x27;, &#x27;1&#x27;, &#x27;2&#x27;].# ImageChannel: [1 - Gray Scale, 3 - RGB].# CharLength: Captcha Length.Model: ModelName: GuoModel ImageChannel: 1 CharLength: 5 CharSet: NUMERIC# Magnification: [ x2 -&gt; from size(50, 50) to size(100,100)].# OriginalColor: [false - Gray Scale, true - RGB].# Binaryzation: [-1: Off, &gt;0 and &lt; 255: On].# Smoothing: [-1: Off, &gt;0: On].# Invert [Binaryzation Color Invert]# Blur: [-1: Off, &gt;0: On].# Resize: [WIDTH, HEIGHT].Pretreatment: Magnification: 0 OriginalColor: false Binaryzation: 240 Smoothing: 3 Invert: false Blur: 5# Resize: [160, 60] 端口可以更改 通过命令行python flask_server.py -p 8888 pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow版本未限制 可能会异常 要加一下限制 完整的txt版本 tensorflow==1.6.0flask&gt;=0.12.3gevent&gt;=1.2.2Flask-Caching&gt;=1.3.3gevent-websocket&gt;=0.10.1futures&gt;=3.1.1tensorflow&gt;=1.6.0pillow&gt;=4.3.0opencv-python&gt;=3.3.0.10numpy==1.14.1grpcio&gt;=1.14.2grpcio_tools&gt;=1.14.2requests&gt;=2.18.4pyyaml&gt;=3.13tornado&gt;=5.1.1","categories":[{"name":"ai","slug":"ai","permalink":"https://guochen2.github.io/categories/ai/"}],"tags":[{"name":"ai","slug":"ai","permalink":"https://guochen2.github.io/tags/ai/"},{"name":"cnn","slug":"cnn","permalink":"https://guochen2.github.io/tags/cnn/"},{"name":"验证码","slug":"验证码","permalink":"https://guochen2.github.io/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"}]},{"title":"vscode远程ssh服务器","slug":"other/vscode+Remotessh","date":"2020-06-19T08:50:29.000Z","updated":"2020-11-23T13:46:49.721Z","comments":true,"path":"2020/06/19/other/vscode+Remotessh/","link":"","permalink":"https://guochen2.github.io/2020/06/19/other/vscode+Remotessh/","excerpt":"","text":"使用vscode插件Remote ssh 远程ssh服务器进行便捷开发vscode 安装remote ssh插件 生成公私钥用于免密登录cmd执行 ssh-keygen -t rsa -b 4096 输入密钥名称直接回车输入空密码 生成密钥对 服务端设置 上传公钥至服务器 /root/.ssh 目录下公钥是.pub后缀文件 设置sshd文件vim /etc/ssh/sshd_config 重启ssh服务service ssh restart 客户端测试是否可用私钥登录ssh -i 私钥文件路径 -p 端口 用户名@host 客户端设置 打开remotessh配置文件 添加远程服务配置 Host 名称随意设置 HostName 远程的host地址 User 登录用户名 Port 端口 IdentityFile “私钥全路径”示例 Host berttrainserver HostName 8.8.8.8 User root Port 10011 IdentityFile &quot;C:\\Users\\GUO\\.ssh\\GUO&quot; 开始连接 选择需要远程的对象 右键开始打开连接","categories":[{"name":"工具","slug":"工具","permalink":"https://guochen2.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://guochen2.github.io/tags/vscode/"},{"name":"ssh","slug":"ssh","permalink":"https://guochen2.github.io/tags/ssh/"}]},{"title":"创建ca证书","slug":"linux/创建ca证书","date":"2020-04-13T13:21:40.000Z","updated":"2020-11-23T13:46:49.664Z","comments":true,"path":"2020/04/13/linux/创建ca证书/","link":"","permalink":"https://guochen2.github.io/2020/04/13/linux/%E5%88%9B%E5%BB%BAca%E8%AF%81%E4%B9%A6/","excerpt":"","text":"创建sh文件内容如下 #!/bin/bash -e# * 为必改项# * 更换为你自己的域名CN=&#x27;&#x27; # 例如: demo.rancher.com# 扩展信任IP或域名## 一般ssl证书只信任域名的访问请求，有时候需要使用ip去访问server，那么需要给ssl证书添加扩展IP，## 多个IP用逗号隔开。如果想多个域名访问，则添加扩展域名（SSL_DNS）,多个SSL_DNS用逗号隔开SSL_IP=&#x27;&#x27; # 例如: 1.2.3.4SSL_DNS=&#x27;&#x27; # 例如: demo.rancher.com# 国家名(2个字母的代号)C=CN# 证书加密位数SSL_SIZE=2048# 证书有效期DATE=$&#123;DATE:-3650&#125;# 配置文件SSL_CONFIG=&#x27;openssl.cnf&#x27;if [[ -z $SILENT ]]; thenecho &quot;----------------------------&quot;echo &quot;| SSL Cert Generator |&quot;echo &quot;----------------------------&quot;echofiexport CA_KEY=$&#123;CA_KEY-&quot;cakey.pem&quot;&#125;export CA_CERT=$&#123;CA_CERT-&quot;cacerts.pem&quot;&#125;export CA_SUBJECT=ca-$CNexport CA_EXPIRE=$&#123;DATE&#125;export SSL_CONFIG=$&#123;SSL_CONFIG&#125;export SSL_KEY=$CN.keyexport SSL_CSR=$CN.csrexport SSL_CERT=$CN.crtexport SSL_EXPIRE=$&#123;DATE&#125;export SSL_SUBJECT=$&#123;CN&#125;export SSL_DNS=$&#123;SSL_DNS&#125;export SSL_IP=$&#123;SSL_IP&#125;export K8S_SECRET_COMBINE_CA=$&#123;K8S_SECRET_COMBINE_CA:-&#x27;true&#x27;&#125;[[ -z $SILENT ]] &amp;&amp; echo &quot;--&gt; Certificate Authority&quot;if [[ -e ./$&#123;CA_KEY&#125; ]]; then [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Using existing CA Key $&#123;CA_KEY&#125;&quot;else [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Generating new CA key $&#123;CA_KEY&#125;&quot; openssl genrsa -out $&#123;CA_KEY&#125; $&#123;SSL_SIZE&#125; &gt; /dev/nullfiif [[ -e ./$&#123;CA_CERT&#125; ]]; then [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Using existing CA Certificate $&#123;CA_CERT&#125;&quot;else [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Generating new CA Certificate $&#123;CA_CERT&#125;&quot; openssl req -x509 -sha256 -new -nodes -key $&#123;CA_KEY&#125; \\ -days $&#123;CA_EXPIRE&#125; -out $&#123;CA_CERT&#125; -subj &quot;/CN=$&#123;CA_SUBJECT&#125;&quot; &gt; /dev/null || exit 1fiecho &quot;====&gt; Generating new config file $&#123;SSL_CONFIG&#125;&quot;cat &gt; $&#123;SSL_CONFIG&#125; &lt;&lt;EOM[req]req_extensions = v3_reqdistinguished_name = req_distinguished_name[req_distinguished_name][ v3_req ]basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentextendedKeyUsage = clientAuth, serverAuthEOMif [[ -n $&#123;SSL_DNS&#125; || -n $&#123;SSL_IP&#125; ]]; then cat &gt;&gt; $&#123;SSL_CONFIG&#125; &lt;&lt;EOMsubjectAltName = @alt_names[alt_names]EOM IFS=&quot;,&quot; dns=($&#123;SSL_DNS&#125;) dns+=($&#123;SSL_SUBJECT&#125;) for i in &quot;$&#123;!dns[@]&#125;&quot;; do echo DNS.$((i+1)) = $&#123;dns[$i]&#125; &gt;&gt; $&#123;SSL_CONFIG&#125; done if [[ -n $&#123;SSL_IP&#125; ]]; then ip=($&#123;SSL_IP&#125;) for i in &quot;$&#123;!ip[@]&#125;&quot;; do echo IP.$((i+1)) = $&#123;ip[$i]&#125; &gt;&gt; $&#123;SSL_CONFIG&#125; done fifi[[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Generating new SSL KEY $&#123;SSL_KEY&#125;&quot;openssl genrsa -out $&#123;SSL_KEY&#125; $&#123;SSL_SIZE&#125; &gt; /dev/null || exit 1[[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Generating new SSL CSR $&#123;SSL_CSR&#125;&quot;openssl req -sha256 -new -key $&#123;SSL_KEY&#125; -out $&#123;SSL_CSR&#125; \\-subj &quot;/CN=$&#123;SSL_SUBJECT&#125;&quot; -config $&#123;SSL_CONFIG&#125; &gt; /dev/null || exit 1[[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Generating new SSL CERT $&#123;SSL_CERT&#125;&quot;openssl x509 -sha256 -req -in $&#123;SSL_CSR&#125; -CA $&#123;CA_CERT&#125; \\ -CAkey $&#123;CA_KEY&#125; -CAcreateserial -out $&#123;SSL_CERT&#125; \\ -days $&#123;SSL_EXPIRE&#125; -extensions v3_req \\ -extfile $&#123;SSL_CONFIG&#125; &gt; /dev/null || exit 1if [[ -z $SILENT ]]; thenecho &quot;====&gt; Complete&quot;echo &quot;keys can be found in volume mapped to $(pwd)&quot;echoecho &quot;====&gt; Output results as YAML&quot;echo &quot;---&quot;echo &quot;ca_key: |&quot;cat $CA_KEY | sed &#x27;s/^/ /&#x27;echoecho &quot;ca_cert: |&quot;cat $CA_CERT | sed &#x27;s/^/ /&#x27;echoecho &quot;ssl_key: |&quot;cat $SSL_KEY | sed &#x27;s/^/ /&#x27;echoecho &quot;ssl_csr: |&quot;cat $SSL_CSR | sed &#x27;s/^/ /&#x27;echoecho &quot;ssl_cert: |&quot;cat $SSL_CERT | sed &#x27;s/^/ /&#x27;echofiif [[ -n $K8S_SECRET_NAME ]]; then if [[ -n $K8S_SECRET_COMBINE_CA ]]; then [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Adding CA to Cert file&quot; cat $&#123;CA_CERT&#125; &gt;&gt; $&#123;SSL_CERT&#125; fi [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Creating Kubernetes secret: $K8S_SECRET_NAME&quot; kubectl delete secret $K8S_SECRET_NAME --ignore-not-found if [[ -n $K8S_SECRET_SEPARATE_CA ]]; then kubectl create secret generic \\ $K8S_SECRET_NAME \\ --from-file=&quot;tls.crt=$&#123;SSL_CERT&#125;&quot; \\ --from-file=&quot;tls.key=$&#123;SSL_KEY&#125;&quot; \\ --from-file=&quot;ca.crt=$&#123;CA_CERT&#125;&quot; else kubectl create secret tls \\ $K8S_SECRET_NAME \\ --cert=$&#123;SSL_CERT&#125; \\ --key=$&#123;SSL_KEY&#125; fi if [[ -n $K8S_SECRET_LABELS ]]; then [[ -z $SILENT ]] &amp;&amp; echo &quot;====&gt; Labeling Kubernetes secret&quot; IFS=$&#x27; \\n\\t&#x27; # We have to reset IFS or label secret will misbehave on some systems kubectl label secret \\ $K8S_SECRET_NAME \\ $K8S_SECRET_LABELS fifiecho &quot;4. 重命名服务证书&quot;mv $&#123;CN&#125;.key tls.keymv $&#123;CN&#125;.crt tls.crt 修改代码开头的CN(域名)，如果需要使用ip去访问rancher server，那么需要给ssl证书添加扩展IP，多个IP用逗号隔开。如果想实现多个域名访问rancher server，则添加扩展域名(SSL_DNS),多个SSL_DNS用逗号隔开。","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ca","slug":"ca","permalink":"https://guochen2.github.io/tags/ca/"}]},{"title":"部署docker私有仓库harbor","slug":"docker/部署docker私有仓库harbor","date":"2020-04-13T13:12:04.000Z","updated":"2020-11-23T13:46:49.628Z","comments":true,"path":"2020/04/13/docker/部署docker私有仓库harbor/","link":"","permalink":"https://guochen2.github.io/2020/04/13/docker/%E9%83%A8%E7%BD%B2docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93harbor/","excerpt":"","text":"系统要求ubuntu 16.04及其以上centos 7.0 及其以上suse 13及其以上 官网 https://goharbor.io/ 安装 以下已ubuntu为例安装dockerapt install docker.io 安装docker-composecurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose https://github.com/docker/compose/releases 下载镜像https://github.com/goharbor/harbor/releases解压 tar -xvf harbor-offline-installer-v1.2.2.tgz 修改 harbor.yml这里的hostname 一定要是用户端能访问到的 否则docker login会失败运行 ./install.sh 访问 http://127.0.0.1:8080/ 密码在配置文件里 用户名admin 停止harbordocker-compose stop 删除harbordocker-compose down 可选 创建ca证书可能出现问题登录镜像仓库时提示Http: server gave HTTP response to HTTPS client 解决方法原因是使用的http 在docker用户端 vim /etc/docker/daemon.json &#123; &quot;insecure-registries&quot;: [&quot;registry的IP地址:端口号&quot;] &#125; // 多个私服的写法 &#123; &quot;insecure-registries&quot;: [&quot;registry1的IP地址:端口号&quot;,&quot;registry2的IP地址:端口号&quot;] &#125; 重启docker server docker restart certificate signed by unknown authority 处理方式同上 证书不被信任 需要信任一下若因为服务器重启或docker导致访问时出现502异常，可能需要重新执行安装程序 之前的数据不会丢失","categories":[{"name":"docker","slug":"docker","permalink":"https://guochen2.github.io/categories/docker/"}],"tags":[{"name":"仓库","slug":"仓库","permalink":"https://guochen2.github.io/tags/%E4%BB%93%E5%BA%93/"},{"name":"harbor","slug":"harbor","permalink":"https://guochen2.github.io/tags/harbor/"}]},{"title":"netcore集成consul配置中心","slug":"netcore/netcore集成consul配置中心","date":"2020-04-13T12:19:05.000Z","updated":"2020-11-23T13:46:49.676Z","comments":true,"path":"2020/04/13/netcore/netcore集成consul配置中心/","link":"","permalink":"https://guochen2.github.io/2020/04/13/netcore/netcore%E9%9B%86%E6%88%90consul%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/","excerpt":"","text":"引用nuget包winton.extensions.configuration.consul 配置控制台程序 var configbuild = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&quot;appsettings.json&quot;, optional: true);string consuleurl=&quot;http://127.0.0.1:8500&quot;; var cancellationTokenSource = new CancellationTokenSource(); configbuild.AddConsul($&quot;&#123;PlatformServices.Default.Application.ApplicationName&#125;/appsettings.json&quot;, cancellationTokenSource.Token, options =&gt; &#123; options.Optional = true; options.ReloadOnChange = true; options.OnLoadException = exceptionContext =&gt; &#123; exceptionContext.Ignore = true; &#125;; options.ConsulConfigurationOptions = cco =&gt; &#123; cco.Address = new Uri(consuleurl); &#125;;//若不设置 默认http://127.0.0.1:8500 &#125;); IConfiguration config = configbuild.Build(); asp.net corepublic static void Main(string[] args) &#123; CreateWebHostBuilder(args).Build().Run(); &#125; public static IWebHostBuilder CreateWebHostBuilder(string[] args) &#123; var cancellationTokenSource = new CancellationTokenSource(); return WebHost.CreateDefaultBuilder(args) .ConfigureAppConfiguration((hostingContext, config) =&gt; &#123; var env = hostingContext.HostingEnvironment; hostingContext.Configuration = config.Build(); string consul_url = hostingContext.Configuration[&quot;Consul_Url&quot;]; config.AddConsul( $&quot;&#123;env.ApplicationName&#125;/appsettings.&#123;env.EnvironmentName&#125;.json&quot;, cancellationTokenSource.Token, options =&gt; &#123; options.Optional = true; options.ReloadOnChange = true; options.OnLoadException = exceptionContext =&gt; &#123; exceptionContext.Ignore = true; &#125;; options.ConsulConfigurationOptions = cco =&gt; &#123; cco.Address = new Uri(consul_url); &#125;; &#125; ).AddEnvironmentVariables(); hostingContext.Configuration = config.Build(); &#125;).UseUrls(&quot;http://localhost:5012&quot;) .UseStartup&lt;Startup&gt;(); &#125; consul配置配置同物理json文件一致 使用使用方式同IConfiguration，consul配置更改会自动更新IConfiguration里的数据 配置里获取实体类nuget引用Microsoft.Extensions.Configuration.Binder config.GetSection(&quot;FileCleanup:Config&quot;).Get&amp;lt; T &amp;gt;();","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"},{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"}]},{"title":"consul集群与多数据中心","slug":"consul/consul集群与多数据中心","date":"2020-02-17T09:48:26.000Z","updated":"2020-11-23T13:46:49.621Z","comments":true,"path":"2020/02/17/consul/consul集群与多数据中心/","link":"","permalink":"https://guochen2.github.io/2020/02/17/consul/consul%E9%9B%86%E7%BE%A4%E4%B8%8E%E5%A4%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83/","excerpt":"","text":"集群下载consul包https://www.consul.io/downloads.html测试consul版本1.5.3 创建配置文件自定义端口-可用于单机测试 生产环境不建议修改端口 集群开3-5个 配置1&#123; &quot;datacenter&quot;: &quot;us-east-1&quot;, //数据中心名称 同一集群名称需相同 &quot;data_dir&quot;: &quot;./data1/&quot;, &quot;node_name&quot;: &quot;dc1&quot;,//节点名称 相同集群名称不能冲突 &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:9301&quot;],//启动自动加入节点 &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 9500, &quot;gRPC&quot;: 9502, &quot;DNS&quot;: 9600, &quot;server&quot;: 9300 , &quot;serf_lan&quot;: 9301, &quot;serf_wan&quot;: 9302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 配置2&#123; &quot;datacenter&quot;: &quot;us-east-1&quot;, &quot;data_dir&quot;: &quot;./data2/&quot;, &quot;node_name&quot;: &quot;dc2&quot;, &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:9301&quot;], &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 10500, &quot;gRPC&quot;: 10502, &quot;DNS&quot;: 10600, &quot;server&quot;: 10300 , &quot;serf_lan&quot;: 10301, &quot;serf_wan&quot;: 10302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 配置3&#123; &quot;datacenter&quot;: &quot;us-east-1&quot;, &quot;data_dir&quot;: &quot;./data3/&quot;, &quot;node_name&quot;: &quot;dc3&quot;, &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:9301&quot;], &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 11500, &quot;gRPC&quot;: 11502, &quot;DNS&quot;: 11600, &quot;server&quot;: 11300 , &quot;serf_lan&quot;: 11301, &quot;serf_wan&quot;: 11302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 启动命令 consul agent -config-file=consul1.json 访问地址 http://127.0.0.1:9500 多数据中心配置1&#123; &quot;datacenter&quot;: &quot;china&quot;,//数据中心名称 &quot;data_dir&quot;: &quot;./data5/&quot;, &quot;node_name&quot;: &quot;chinadc1&quot;,//节点名字 &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:12301&quot;],//集群自动加入 &quot;retry_join_wan&quot;:[&quot;127.0.0.1:9302&quot;],//数据中心自动加入 &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 12500, &quot;gRPC&quot;: 12502, &quot;DNS&quot;: 12600, &quot;server&quot;: 12300 , &quot;serf_lan&quot;: 12301, &quot;serf_wan&quot;: 12302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 配置2&#123; &quot;datacenter&quot;: &quot;china&quot;, &quot;data_dir&quot;: &quot;./data6/&quot;, &quot;node_name&quot;: &quot;chinadc2&quot;, &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:12301&quot;], &quot;retry_join_wan&quot;:[&quot;127.0.0.1:9302&quot;], &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 14500, &quot;gRPC&quot;: 14502, &quot;DNS&quot;: 14600, &quot;server&quot;: 14300 , &quot;serf_lan&quot;: 14301, &quot;serf_wan&quot;: 14302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 配置3&#123; &quot;datacenter&quot;: &quot;china&quot;, &quot;data_dir&quot;: &quot;./data7/&quot;, &quot;node_name&quot;: &quot;chinadc3&quot;, &quot;bootstrap_expect&quot;: 2, &quot;bind_addr&quot;: &quot;0.0.0.0&quot;, &quot;retry_join&quot;:[&quot;127.0.0.1:12301&quot;], &quot;retry_join_wan&quot;:[&quot;127.0.0.1:9302&quot;], &quot;retry_interval&quot;: &quot;10s&quot;, &quot;retry_max&quot;: 0, &quot;server&quot;: true, &quot;addresses&quot;: &#123; &quot;http&quot;: &quot;0.0.0.0&quot; &#125;, &quot;client_addr&quot;:&quot;0.0.0.0&quot;, &quot;ui&quot;:true, &quot;ports&quot;: &#123; &quot;http&quot;: 15500, &quot;gRPC&quot;: 15502, &quot;DNS&quot;: 15600, &quot;server&quot;: 15300 , &quot;serf_lan&quot;: 15301, &quot;serf_wan&quot;: 15302 &#125;, &quot;acl&quot; : &#123; &quot;enabled&quot;: false, &quot;default_policy&quot;: &quot;deny&quot;, &quot;down_policy&quot;: &quot;extend-cache&quot;, &quot;tokens&quot; : &#123; &quot;master&quot; : &quot;b1gs33cr3t&quot; &#125; &#125;&#125; 启动命令 consul agent -config-file=consul1.json","categories":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/categories/consul/"}],"tags":[{"name":"集群","slug":"集群","permalink":"https://guochen2.github.io/tags/%E9%9B%86%E7%BE%A4/"},{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"}]},{"title":"spring-boot-admin结合consul实现动态client监控","slug":"java/springbootadmin结合consul","date":"2020-02-17T03:33:58.000Z","updated":"2020-11-23T13:46:49.654Z","comments":true,"path":"2020/02/17/java/springbootadmin结合consul/","link":"","permalink":"https://guochen2.github.io/2020/02/17/java/springbootadmin%E7%BB%93%E5%90%88consul/","excerpt":"","text":"目的：使用springboot-admin作为监控端监控springboot节点 将springboot-admin-server注册到consul 客户端自动发现 自动注册创建springboot-admin-server服务pom &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;&amp;#47;modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;&amp;#47;version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;&amp;#47;parent&gt; &lt;groupId&gt;com.guochen&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;adminserver&lt;&amp;#47;artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;&amp;#47;version&gt; &lt;name&gt;adminserver&lt;&amp;#47;name&gt; &lt;description&gt;Demo project for Spring Boot&lt;&amp;#47;description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;&amp;#47;java.version&gt; &lt;&amp;#47;properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-server&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.2&lt;&amp;#47;version&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-all&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;&amp;#47;version&gt; &lt;&amp;#47;dependency&gt;&lt;!-- &lt;dependency&gt;--&gt;&lt;!-- &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt;--&gt;&lt;!-- &lt;artifactId&gt;spring-boot-starter-security&lt;&amp;#47;artifactId&gt;--&gt;&lt;!-- &lt;&amp;#47;dependency&gt;--&gt; &lt;&amp;#47;dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;plugin&gt; &lt;&amp;#47;plugins&gt; &lt;&amp;#47;build&gt;&lt;&amp;#47;project&gt; 启动类 @SpringBootApplication@EnableAdminServer@EnableDiscoveryClientpublic class AdminserverApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(AdminserverApplication.class, args); &#125;&#125; application.yml配置 server: port: 8777spring: application: name: admin-server cloud: config: enabled: false consul: host: localhost port: 8500 discovery: # 启用服务发现 enabled: true # 启用服务注册 register: true # 服务停止时取消注册 deregister: true # 表示注册时使用IP而不是hostname prefer-ip-address: true # 执行监控检查的频率 health-check-interval: 30s # 设置健康检查失败多长时间后，取消注册 health-check-critical-timeout: 30s # 健康检查的路径 health-check-path: /actuator/info # 服务注册标识，格式为：应用名称+服务器IP+端口 instance-id: $&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;# tags: management.context-path=/foo, health.path=/ping, user.name=admin, user.password=123#监控监控management: health: redis: enabled: false consul: enabled: true binders: enabled: false endpoints: web: exposure: include: &quot;*&quot; endpoint: health: show-details: always# security:# user:# name: &quot;admin&quot;# password: &quot;123&quot; 创建springboot-admin-client服务pom &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;&amp;#47;modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;&amp;#47;version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;&amp;#47;parent&gt; &lt;groupId&gt;com.guochen&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;consuldemo&lt;&amp;#47;artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;&amp;#47;version&gt; &lt;name&gt;consuldemo&lt;&amp;#47;name&gt; &lt;description&gt;Demo project for Spring Boot&lt;&amp;#47;description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;&amp;#47;java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;&amp;#47;spring-cloud.version&gt; &lt;&amp;#47;properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;&amp;#47;artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;exclusion&gt; &lt;&amp;#47;exclusions&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-config&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-client&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.2&lt;&amp;#47;version&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;&amp;#47;dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;&amp;#47;artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&amp;#47;version&gt; &lt;type&gt;pom&lt;&amp;#47;type&gt; &lt;scope&gt;import&lt;&amp;#47;scope&gt; &lt;&amp;#47;dependency&gt; &lt;&amp;#47;dependencies&gt; &lt;&amp;#47;dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;plugin&gt; &lt;&amp;#47;plugins&gt; &lt;&amp;#47;build&gt;&lt;&amp;#47;project&gt; 启动类 @SpringBootApplication@EnableDiscoveryClient 重点 bootstrap.yml spring: cloud: consul: host: localhost port: 8500 #enabled将此值设置为“false”禁用Consul配置 config: enabled: true #默认是true -- format: YAML # 表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES data-key: data #表示consul上面的KEY值(或者说文件的名字) 默认是data # watch选项为配置监视功能，主要监视配置的改变 watch: enabled: true delay: 10000 wait-time: 30 consul 配置中心配置spring: boot: admin: client: url: admin-servermanagement: endpoints: web: exposure: include: &#x27;*&#x27; endpoint: health: show-details: ALWAYS 运行成功截图 客户端信息","categories":[{"name":"java","slug":"java","permalink":"https://guochen2.github.io/categories/java/"}],"tags":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"},{"name":"springcloudadmin","slug":"springcloudadmin","permalink":"https://guochen2.github.io/tags/springcloudadmin/"}]},{"title":"spring-cloud使用consul作为配置中心和注册中心","slug":"java/spring-cloud使用consul作为配置中心和注册中心","date":"2020-02-15T12:56:37.000Z","updated":"2020-11-23T13:46:49.646Z","comments":true,"path":"2020/02/15/java/spring-cloud使用consul作为配置中心和注册中心/","link":"","permalink":"https://guochen2.github.io/2020/02/15/java/spring-cloud%E4%BD%BF%E7%94%A8consul%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E5%92%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/","excerpt":"","text":"注意事项 启动类上需要设置@EnableScheduling注解 配置才能自动刷新 启动类上需要设置@EnableConfigurationProperties({StudentConfig.class}) model类上设置@ConfigurationProperties(prefix = “student”) //前缀：对应consul 配置中心的 student 前缀 通过@Value注入的属性，修改consul的配置后，属性不能立即生效，需要服务重启。而通过@ConfigurationProperties注入的属性，修改consul的配置后，属性会立即生效，所以建议如果需要动态生效的配置，最好使用@ConfigurationProperties进行属性的注入。 consul可以作为配置中心和注册中心pom.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;&amp;#47;modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;&amp;#47;artifactId&gt; &lt;version&gt;2.2.4.RELEASE&lt;&amp;#47;version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;&amp;#47;parent&gt; &lt;groupId&gt;com.guochen&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;consuldemo&lt;&amp;#47;artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;&amp;#47;version&gt; &lt;name&gt;consuldemo&lt;&amp;#47;name&gt; &lt;description&gt;Demo project for Spring Boot&lt;&amp;#47;description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;&amp;#47;java.version&gt; &lt;spring-cloud.version&gt;Hoxton.SR1&lt;&amp;#47;spring-cloud.version&gt; &lt;&amp;#47;properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-config&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;dependency&gt; &lt;&amp;#47;dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;&amp;#47;artifactId&gt; &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&amp;#47;version&gt; &lt;type&gt;pom&lt;&amp;#47;type&gt; &lt;scope&gt;import&lt;&amp;#47;scope&gt; &lt;&amp;#47;dependency&gt; &lt;&amp;#47;dependencies&gt; &lt;&amp;#47;dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;&amp;#47;artifactId&gt; &lt;&amp;#47;plugin&gt; &lt;&amp;#47;plugins&gt; &lt;&amp;#47;build&gt;&lt;&amp;#47;project&gt; bootstrap.ymlspring: cloud: consul: host: localhost port: 8500 #enabled将此值设置为“false”禁用Consul配置 config: enabled: true #默认是true -- format: YAML # 表示consul上面文件的格式 有四种 YAML PROPERTIES KEY-VALUE FILES data-key: data #表示consul上面的KEY值(或者说文件的名字) 默认是data # watch选项为配置监视功能，主要监视配置的改变 watch: enabled: true delay: 10000 wait-time: 30 application.ymlspring: application: name: consul-service profiles: active: dev cloud: consul: # 服务发现配置 discovery: # 启用服务发现 enabled: true # 启用服务注册 register: true # 服务停止时取消注册 deregister: true # 表示注册时使用IP而不是hostname prefer-ip-address: true # 执行监控检查的频率 health-check-interval: 30s # 设置健康检查失败多长时间后，取消注册 health-check-critical-timeout: 30s # 健康检查的路径 health-check-path: /actuator/info # 服务注册标识，格式为：应用名称+服务器IP+端口 instance-id: $&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125; 启动类 @SpringBootApplication@EnableDiscoveryClient@EnableScheduling //启用后，会定时拉取配置@EnableConfigurationProperties(&#123;StudentConfig.class&#125;)public class ApplicationStart &#123; public static void main(String[] args) &#123; SpringApplication.run(ApplicationStart.class, args); &#125;&#125; model类 package io.guochen.consuldemo.model;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = &quot;student&quot;) //前缀：对应consul 配置中心的 student 前缀public class StudentConfig &#123; private String name; private int age; private String sex; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125;&#125; 测试类 package io.guochen.consuldemo.controller;import io.guochen.consuldemo.model.StudentConfig;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class TestController &#123; @Autowired private StudentConfig studentConfig; @Value(&quot;$&#123;test.name&#125;&quot;) private String testname; @RequestMapping(&quot;/test&quot;) public StudentConfig testDescription() &#123; return studentConfig; &#125;&#125; 添加consul配置注意： 默认情况下，consul配置默认存储在/config文件夹中 myconsul为spring.application.name值，dev为spring.profiles.active值，data为data-key值 value用的是yml格式的配置，冒号后面有一个空格。 程序启动后可以看到consul里已经注册成功 且配置可以正常读取","categories":[{"name":"java","slug":"java","permalink":"https://guochen2.github.io/categories/java/"}],"tags":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"},{"name":"springcloud","slug":"springcloud","permalink":"https://guochen2.github.io/tags/springcloud/"}]},{"title":"jenkins部分注意事项","slug":"java/jenkins部分注意事项","date":"2020-02-15T07:33:56.000Z","updated":"2020-11-23T13:46:49.643Z","comments":true,"path":"2020/02/15/java/jenkins部分注意事项/","link":"","permalink":"https://guochen2.github.io/2020/02/15/java/jenkins%E9%83%A8%E5%88%86%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"安装其他插件重启Jenkins后，又出现了部分中文简体不翻译的情况。尝试以下方法，可以完美修复。 将语言设定为zh_US，Jenkins切换为英文。 调用restart重启Jenkins：http://域名/restart。 再次语言设定为zh_CN，刷新即可。 从问题分析上看，在简体中文上restart Jenkins就会发生部分简体中文不显示的现象。","categories":[{"name":"java","slug":"java","permalink":"https://guochen2.github.io/categories/java/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://guochen2.github.io/tags/jenkins/"}]},{"title":"jenkins自动构建netcore项目","slug":"java/jenkins自动构建netcore项目","date":"2020-02-15T07:27:41.000Z","updated":"2020-11-23T13:46:49.633Z","comments":true,"path":"2020/02/15/java/jenkins自动构建netcore项目/","link":"","permalink":"https://guochen2.github.io/2020/02/15/java/jenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAnetcore%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"netcore项目提交到github后 jenkins自动构建，自动发布，自动运行 注意事项 netcore项目根目录下的Dockerfile需设置正确，在docker里直接执行docker build -t name . 能正常创建成一个镜像 需要有公网ip能访问到jenkins，用于push代码后git能通过webhook到jenkins jenkins需要安装Git、GitHub 插件 项目设置里勾选 系统设置里需要设置github hookurl github里项目的设置webhook jenkins项目设置里 构建 执行shell docker build --rm -t web.d/webapi:2.1.1 -f Dockerfile . #根据Dockerfile构建 docker ps -a | grep webapi | awk &#x27;&#123;print $1&#125;&#x27; | xargs -r docker stop | xargs -r docker rm #查询容器 找到容器名称为 webapi的容器 先stop 再删除 docker run -d -p 5001:5000 --name webapi --restart always web.d/webapi:2.1.1 #运行一个新的容器","categories":[{"name":"java","slug":"java","permalink":"https://guochen2.github.io/categories/java/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://guochen2.github.io/tags/jenkins/"}]},{"title":"mongodb常用注意事项","slug":"mongodb/mongodb常用注意事项","date":"2020-02-15T07:23:01.000Z","updated":"2020-11-23T13:46:49.666Z","comments":true,"path":"2020/02/15/mongodb/mongodb常用注意事项/","link":"","permalink":"https://guochen2.github.io/2020/02/15/mongodb/mongodb%E5%B8%B8%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"删除或新增一列比如在product 这个表中，要删除shop这个字段，用以下命令即可（在cmd中，或者robo 3T中）。 db.getCollection(&#x27;product&#x27;).update(&#123;&#125;,&#123;&#x27;$unset&#x27;:&#123;&#x27;shop&#x27;:1&#125;&#125;,false, true) 最后一个true 表示对整个表都执行 如果要新增shop字段，并且赋值为空，则： db.getCollection(&#x27;product&#x27;).update(&#123;&#125;,&#123;&#x27;$set&#x27;:&#123;&#x27;shop&#x27;:&#x27;&#x27;&#125;&#125;,false, true) 高版本node 执行mongodb的command 需使用client.db(&quot;admin&quot;).admin().command() 某参数自增1或自减update &#123;$inc:&#123;count:1&#125;&#125; count为参数 释放内存db.runCommand(&#123;closeAllDatabases:1&#125;) 删除数据库后磁盘还留有预分配的空间，需要执行db.repairDatabase()","categories":[{"name":"mongodb","slug":"mongodb","permalink":"https://guochen2.github.io/categories/mongodb/"}],"tags":[]},{"title":"nginx tar安装","slug":"nginx/ubuntu安装nginxtar包","date":"2020-02-15T07:05:35.000Z","updated":"2020-11-23T13:46:49.718Z","comments":true,"path":"2020/02/15/nginx/ubuntu安装nginxtar包/","link":"","permalink":"https://guochen2.github.io/2020/02/15/nginx/ubuntu%E5%AE%89%E8%A3%85nginxtar%E5%8C%85/","excerpt":"","text":"wget http://nginx.org/download/nginx-1.13.6.tar.gz#解压：tar -zxvf nginx-1.13.6.tar.gz#进入解压目录：cd nginx-1.13.6#配置：./configure --prefix=/usr/local/nginx#编译：make#安装：sudo make install#启动：sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过-h查看帮助命令。#查看进程：ps -ef | grep nginx 配置软链接 sudo ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx 现在就可以不用路径直接输入nginx启动。配置开机启动服务在/etc/init.d/下创建nginx文件，sudo vim /etc/init.d/nginx，内容如下： #!/bin/sh### BEGIN INIT INFO# Provides: nginx# Required-Start: $local_fs $remote_fs $network $syslog $named# Required-Stop: $local_fs $remote_fs $network $syslog $named# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: starts the nginx web server# Description: starts nginx using start-stop-daemon### END INIT INFOPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binDAEMON=/usr/local/nginx/sbin/nginxNAME=nginxDESC=nginx# Include nginx defaults if availableif [ -r /etc/default/nginx ]; then. /etc/default/nginxfiSTOP_SCHEDULE=&quot;$&#123;STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5&#125;&quot;test -x $DAEMON || exit 0. /lib/init/vars.sh. /lib/lsb/init-functions# Try to extract nginx pidfilePID=$(cat /usr/local/nginx/conf/nginx.conf | grep -Ev &#x27;^\\s*#&#x27; | awk &#x27;BEGIN &#123; RS=&quot;[;&#123;&#125;]&quot; &#125; &#123; if ($1 == &quot;pid&quot;) print $2 &#125;&#x27; | head -n1)if [ -z &quot;$PID&quot; ]; thenPID=/run/nginx.pidfiif [ -n &quot;$ULIMIT&quot; ]; then# Set ulimit if it is set in /etc/default/nginxulimit $ULIMITfistart_nginx() &#123;# Start the daemon/service## Returns:# 0 if daemon has been started# 1 if daemon was already running# 2 if daemon could not be startedstart-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test &gt; /dev/null \\|| return 1start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \\$DAEMON_OPTS 2&gt;/dev/null \\|| return 2&#125;test_config() &#123;# Test the nginx configuration$DAEMON -t $DAEMON_OPTS &gt;/dev/null 2&gt;&amp;1&#125;stop_nginx() &#123;# Stops the daemon/service## Return# 0 if daemon has been stopped# 1 if daemon was already stopped# 2 if daemon could not be stopped# other if a failure occurredstart-stop-daemon --stop --quiet --retry=$STOP_SCHEDULE --pidfile $PID --name $NAMERETVAL=&quot;$?&quot;sleep 1return &quot;$RETVAL&quot;&#125;reload_nginx() &#123;# Function that sends a SIGHUP to the daemon/servicestart-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $NAMEreturn 0&#125;rotate_logs() &#123;# Rotate log filesstart-stop-daemon --stop --signal USR1 --quiet --pidfile $PID --name $NAMEreturn 0&#125;upgrade_nginx() &#123;# Online upgrade nginx executable# http://nginx.org/en/docs/control.html ## Return# 0 if nginx has been successfully upgraded# 1 if nginx is not running# 2 if the pid files were not created on time# 3 if the old master could not be killedif start-stop-daemon --stop --signal USR2 --quiet --pidfile $PID --name $NAME; then# Wait for both old and new master to write their pid filewhile [ ! -s &quot;$&#123;PID&#125;.oldbin&quot; ] || [ ! -s &quot;$&#123;PID&#125;&quot; ]; docnt=`expr $cnt + 1`if [ $cnt -gt 10 ]; thenreturn 2fisleep 1done# Everything is ready, gracefully stop the old masterif start-stop-daemon --stop --signal QUIT --quiet --pidfile &quot;$&#123;PID&#125;.oldbin&quot; --name $NAME; thenreturn 0elsereturn 3fielsereturn 1fi&#125;case &quot;$1&quot; instart)log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot;start_nginxcase &quot;$?&quot; in0|1) log_end_msg 0 ;;2) log_end_msg 1 ;;esac;;stop)log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot;stop_nginxcase &quot;$?&quot; in0|1) log_end_msg 0 ;;2) log_end_msg 1 ;;esac;;restart)log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot;# Check configuration before stopping nginxif ! test_config; thenlog_end_msg 1 # Configuration errorexit $?fistop_nginxcase &quot;$?&quot; in0|1)start_nginxcase &quot;$?&quot; in0) log_end_msg 0 ;;1) log_end_msg 1 ;; # Old process is still running*) log_end_msg 1 ;; # Failed to startesac;;*)# Failed to stoplog_end_msg 1;;esac;;reload|force-reload)log_daemon_msg &quot;Reloading $DESC configuration&quot; &quot;$NAME&quot;# Check configuration before stopping nginx## This is not entirely correct since the on-disk nginx binary# may differ from the in-memory one, but that&#x27;s not common. # We prefer to check the configuration and return an error# to the administrator.if ! test_config; thenlog_end_msg 1 # Configuration errorexit $?fireload_nginxlog_end_msg $?;;configtest|testconfig)log_daemon_msg &quot;Testing $DESC configuration&quot;test_configlog_end_msg $?;;status)status_of_proc -p $PID &quot;$DAEMON&quot; &quot;$NAME&quot; &amp;&amp; exit 0 || exit $?;;upgrade)log_daemon_msg &quot;Upgrading binary&quot; &quot;$NAME&quot;upgrade_nginxlog_end_msg $?;;rotate)log_daemon_msg &quot;Re-opening $DESC log files&quot; &quot;$NAME&quot;rotate_logslog_end_msg $?;;*)echo &quot;Usage: $NAME &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;&quot; &gt;&amp;2exit 3;;esac #设置服务脚本有执行权限sudo chmod +x /etc/init.d/nginx#注册服务cd /etc/init.d/sudo update-rc.d nginx defaults 现在基本上就可以开机启动了，常用的命令如下： sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;","categories":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/categories/nginx/"}],"tags":[{"name":"tar","slug":"tar","permalink":"https://guochen2.github.io/tags/tar/"}]},{"title":"nginx日志切割","slug":"nginx/日志切割","date":"2020-02-15T06:59:27.000Z","updated":"2020-11-23T13:46:49.719Z","comments":true,"path":"2020/02/15/nginx/日志切割/","link":"","permalink":"https://guochen2.github.io/2020/02/15/nginx/%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/","excerpt":"","text":"设定每日运行计划 bat文件内容如下 @echo offrem @echo off rem 取1天之前的日期 echo wscript.echo dateadd(&quot;d&quot;,-1,date) &gt;%tmp%\\tmp.vbsfor /f &quot;tokens=1,2,3* delims=/&quot; %%i in (&#x27;cscript /nologo %tmp%\\tmp.vbs&#x27;) do set y=%%ifor /f &quot;tokens=1,2,3* delims=/&quot; %%i in (&#x27;cscript /nologo %tmp%\\tmp.vbs&#x27;) do set m=%%jfor /f &quot;tokens=1,2,3* delims=/&quot; %%i in (&#x27;cscript /nologo %tmp%\\tmp.vbs&#x27;) do set d=%%kif %m% LSS 9 set m=0%m%if %d% LSS 9 set d=0%d%echo %y%-%m%-%d% rem 设置 Nginx 位于的盘符 set NGINX_DRIVER=c:rem 设置 Nginx 的主目录 set NGINX_PATH=%NGINX_DRIVER%\\nginxrem 设置 Nginx 的日志目录 set LOG_PATH=%NGINX_PATH%\\logsrem 设置Nginx日志备份路径set Log_Back_Path=%NGINX_PATH%\\logbackrem 移动文件 move %LOG_PATH%\\napi.access.log %Log_Back_Path%\\napi\\access_%y%-%m%-%d%.logmove %LOG_PATH%\\vercode.access.log %Log_Back_Path%\\vercode\\access_%y%-%m%-%d%.log","categories":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/categories/nginx/"}],"tags":[{"name":"日志分割","slug":"日志分割","permalink":"https://guochen2.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/"}]},{"title":"mongodb日志切割","slug":"mongodb/日志切割","date":"2020-02-15T06:55:49.000Z","updated":"2020-11-23T13:46:49.667Z","comments":true,"path":"2020/02/15/mongodb/日志切割/","link":"","permalink":"https://guochen2.github.io/2020/02/15/mongodb/%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/","excerpt":"","text":"mongodb日志文件过大 使用命令分割 use admindb.runCommand(&#123;logRotate:1&#125;)","categories":[{"name":"mongodb","slug":"mongodb","permalink":"https://guochen2.github.io/categories/mongodb/"}],"tags":[{"name":"日志分割","slug":"日志分割","permalink":"https://guochen2.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/"}]},{"title":"springcloud部分注意事项","slug":"java/springcloud部分注意事项","date":"2020-02-15T06:44:41.000Z","updated":"2020-11-23T13:46:49.662Z","comments":true,"path":"2020/02/15/java/springcloud部分注意事项/","link":"","permalink":"https://guochen2.github.io/2020/02/15/java/springcloud%E9%83%A8%E5%88%86%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"Eureka 服务注册Ribbon 客户端负载均衡Feign 远程请求接口化 @GetMapping不支持 @PathVarlable必须设置value 传递复杂对象强制使用的POST传递 若接收端必须是Get 则传递时方法里需要对复杂对象进行解析成单个参数 启动程序后首次调用超时问题解决方案 1.增加hystrix超时时间hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000 2 关闭超时检测hystrix.command.default.execution.timeout.enabled: false 3 禁用feign的hystrixfeign.hystrix.enabled: false 其他启动java 设置内存java -Xms64m -Xmx128m -jar microservice-provider-user-0.0.1-SNAPSHOT.jar 启动java 设置不同的profile组 java -jar microservice-provider-user-0.0.1-SNAPSHOT.jar –spring.profiles.active=a8000 spring: application: name: microservice-provider-user ---spring: profiles: a8000 server: port: 8000 ---spring: profiles: a8001 server: port: 8001 ---spring: profiles: a8002 server: port: 8002 spring cloud使用consul注册发现&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;&amp;#47;artifactId&gt;&lt;&amp;#47;dependency&gt; 若注册状态提示204 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&amp;#47;groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;&amp;#47;artifactId&gt;&lt;&amp;#47;dependency&gt; 主类添加 @EnableDiscoveryClient","categories":[{"name":"java","slug":"java","permalink":"https://guochen2.github.io/categories/java/"}],"tags":[{"name":"springcloud","slug":"springcloud","permalink":"https://guochen2.github.io/tags/springcloud/"}]},{"title":"netcore2.2使用autofac","slug":"netcore2.2/autofac","date":"2020-02-15T06:18:20.000Z","updated":"2020-11-23T13:46:49.693Z","comments":true,"path":"2020/02/15/netcore2.2/autofac/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/autofac/","excerpt":"","text":"Nuget引用AutofacAutofac.Extensions.DependencyInjection public IServiceProvider ConfigureServices(IServiceCollection services)&#123;//使用autofac作为IOCvar containerBuilder = new ContainerBuilder();containerBuilder.Populate(services);//将services里的内置的一些IOC和autofac整合containerBuilder.RegisterModule&amp;lt; DefaultModuleRegister&amp;gt; ();containerBuilder.RegisterType&amp;lt; BaseResponse&amp;gt; ().AsSelf();return new AutofacServiceProvider(containerBuilder.Build());&#125; 新模块组件注册containerBuilder.RegisterModule&amp;lt; DefaultModuleRegister&amp;gt; (); using Autofac;using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;namespace YFJK.BasicServices.Host.Builder&#123; public class DefaultModuleRegister : Module &#123; protected override void Load(ContainerBuilder builder) &#123; builder.RegisterType&amp;lt; Models.BaseResponse&amp;gt; ().AsSelf(); &#125; &#125;&#125; 指定构造函数参数注册containerBuilder.RegisterType&amp;lt; Neo4jHelper&amp;gt; ().WithParameters(new List&amp;lt; NamedParameter&amp;gt; () &#123; new NamedParameter(&quot;bolturl&quot;,Configuration[&quot;Neo4jSetting:Bolt&quot;]), new NamedParameter(&quot;httpurl&quot;,Configuration[&quot;Neo4jSetting:Url&quot;]), new NamedParameter(&quot;user&quot;,SecurityCommon.DecryptDES(Configuration[&quot;Neo4jSetting:User&quot;])), new NamedParameter(&quot;password&quot;,SecurityCommon.DecryptDES(Configuration[&quot;Neo4jSetting:Password&quot;])), &#125;).SingleInstance(); 其他注入实例调用注册containerBuilder.Register(a =&amp;gt; &#123; return new MongoClient(a.Resolve&amp;lt; YFConsulConfig&amp;gt; ().GetConfig(&quot;BertPreditMongoDBConfig:Conn&quot;)); &#125;).Named&amp;lt; MongoClient&amp;gt; (&quot;BertPredit&quot;); 封装使用commonusing Autofac;using System;using System.Collections.Generic;using System.Text;namespace YFJK.ScheduleTask.Library&#123; public class AutoFacCommon &#123; private static IContainer AutofacContainer; public static void Init(IContainer container) &#123; AutofacContainer = container; &#125; public static void Dispose() &#123; AutofacContainer.Dispose(); &#125; public static T GetInstance&amp;lt; T&amp;gt; (string name = null, ILifetimeScope scope = null) &#123; if (scope == null) &#123; using (scope = AutofacContainer.BeginLifetimeScope()) &#123; if (string.IsNullOrWhiteSpace(name)) &#123; return scope.Resolve&amp;lt; T&amp;gt; (); &#125; return scope.ResolveNamed&amp;lt; T&amp;gt; (name); &#125; &#125; else &#123; if (string.IsNullOrWhiteSpace(name)) &#123; return scope.Resolve&amp;lt; T&amp;gt; (); &#125; return scope.ResolveNamed&amp;lt; T&amp;gt; (name); &#125; &#125; public static ILifetimeScope GetScope() &#123; return AutofacContainer.BeginLifetimeScope(); &#125; &#125;&#125; 注意 使用sqlconnection等资源时 按需求可能需要先获取scope 主动释放","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"autofac","slug":"autofac","permalink":"https://guochen2.github.io/tags/autofac/"}]},{"title":"netcore2.2跨域","slug":"netcore2.2/cors","date":"2020-02-15T06:12:52.000Z","updated":"2020-11-23T13:46:49.694Z","comments":true,"path":"2020/02/15/netcore2.2/cors/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/cors/","excerpt":"","text":"NuGet引用Microsoft.AspNetCore.CorsStartup.cs文件 services.AddCors(options =&gt;options.AddPolicy(&quot;AllowAllOrgin&quot;,builder =&gt; builder.AllowAnyMethod().AllowAnyHeader().AllowAnyOrigin().AllowCredentials())); 启用 app.UseCors(); 控制器 [EnableCors(&quot;AllowAllOrgin&quot;)]public class GetBatchJobHistoryController : ControllerBase","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"跨域","slug":"跨域","permalink":"https://guochen2.github.io/tags/%E8%B7%A8%E5%9F%9F/"}]},{"title":"netcore2.2集成SqlSugar","slug":"netcore2.2/SqlSugar","date":"2020-02-15T06:09:35.000Z","updated":"2020-11-23T13:46:49.688Z","comments":true,"path":"2020/02/15/netcore2.2/SqlSugar/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/SqlSugar/","excerpt":"","text":"文档地址 http://www.codeisbug.com/Doc/8 nuget引用sqlSugarCore示例代码 using SqlSugar;using System;using System.Collections.Generic;using System.Text;using EntityRiskUiBackend.Application;using System.Linq;using EntityRiskUiBackend.Entity.DTO;using EntityInfo = EntityRiskUiBackend.Entity.DTO.EntityInfo;using EntityRiskUiBackend.Repos.SqlSugar.Extensions.DataCache;namespace EntityRiskUiBackend.Repos.DB&#123; public class SqlSugarDbContext &#123; public SqlSugarDbContext() &#123; Db = new SqlSugarClient(new ConnectionConfig() &#123; ConnectionString = EntityRiskUiBackend.Application.Config.DBConfig.DBConnectionString, DbType = DbType.SqlServer, InitKeyType = InitKeyType.SystemTable,//从特性读取主键和自增列信息 IsAutoCloseConnection = true,//开启自动释放模式和EF原理一样我就不多解释了 ConfigureExternalServices = new ConfigureExternalServices() &#123; DataInfoCacheService = new MemoryCache() //MemoryCache是继承ICacheService自已实现的一个类 &#125; &#125;); //调式代码 用来打印SQL Db.Aop.OnLogExecuting = (sql, pars) =&gt; &#123; Console.WriteLine(sql + &quot;\\r\\n&quot; + Db.Utilities.SerializeObject(pars.ToDictionary(it =&gt; it.ParameterName, it =&gt; it.Value))); Console.WriteLine(); &#125;; Db.Aop.OnDiffLogEvent = it =&gt; &#123; var editBeforeData = it.BeforeData; var editAfterData = it.AfterData; var sql = it.Sql; var parameter = it.Parameters; var data = it.BusinessData; var time = it.Time; var diffType = it.DiffType;//枚举值 insert 、update 和 delete 用来作业务区分 Console.WriteLine($&quot; 记录执行的日志 进行审计 &#123;editBeforeData&#125; &#123;editAfterData&#125; &#123;sql&#125; &#123;parameter&#125; &#123;data&#125; &#123;time&#125; &#123;diffType&#125;&quot;); //你可以在这里面写日志方法 &#125;; &#125; //注意：不能写成静态的，不能写成静态的 public SqlSugarClient Db;//用来处理事务多表查询和复杂的操作 public SimpleClient&lt;Enterpris&gt; EnterprisDb &#123; get &#123; return new SimpleClient&lt;Enterpris&gt;(Db); &#125; &#125; public SimpleClient&lt;EntityInfo&gt; EntityInfoDb &#123; get &#123; return new SimpleClient&lt;EntityInfo&gt;(Db); &#125; &#125; public SimpleClient&lt;CreditChinaEntityBasicInfo&gt; CreditChinaEntityBasicInfoDb &#123; get &#123; return new SimpleClient&lt;CreditChinaEntityBasicInfo&gt;(Db); &#125; &#125; public SimpleClient&lt;SystemUsers&gt; SystemUserDb &#123; get &#123; return new SimpleClient&lt;SystemUsers&gt;(Db); &#125; &#125; public SimpleClient&lt;News&gt; NewsDb &#123; get &#123; return new SimpleClient&lt;News&gt;(Db); &#125; &#125; public SimpleClient&lt;RiskFactor&gt; RiskFactorDb &#123; get &#123; return new SimpleClient&lt;RiskFactor&gt;(Db); &#125; &#125; public SimpleClient&lt;RiskUiJobHistory&gt; RiskUiJobHistoryDb &#123; get &#123; return new SimpleClient&lt;RiskUiJobHistory&gt;(Db); &#125; &#125; &#125;&#125; 缓存 using EntityRiskUiBackend.Application.Helper;using SqlSugar;using System;using System.Collections.Generic;using System.Text;namespace EntityRiskUiBackend.Repos.SqlSugar.Extensions.DataCache&#123; class MemoryCache : ICacheService &#123; public void Add&lt;V&gt;(string key, V value) &#123; MemoryCacheHelper&lt;V&gt;.GetInstance().Add(key, value); &#125; public void Add&lt;V&gt;(string key, V value, int cacheDurationInSeconds) &#123; MemoryCacheHelper&lt;V&gt;.GetInstance().Add(key, value, cacheDurationInSeconds); &#125; public bool ContainsKey&lt;V&gt;(string key) &#123; return MemoryCacheHelper&lt;V&gt;.GetInstance().ContainsKey(key); &#125; public V Get&lt;V&gt;(string key) &#123; return MemoryCacheHelper&lt;V&gt;.GetInstance().Get(key); &#125; public IEnumerable&lt;string&gt; GetAllKey&lt;V&gt;() &#123; throw new NotImplementedException(); &#125; public V GetOrCreate&lt;V&gt;(string cacheKey, Func&lt;V&gt; create, int cacheDurationInSeconds = int.MaxValue) &#123; var cacheManager = MemoryCacheHelper&lt;V&gt;.GetInstance(); if (cacheManager.ContainsKey(cacheKey)) &#123; return cacheManager[cacheKey]; &#125; else &#123; var result = create(); cacheManager.Add(cacheKey, result, cacheDurationInSeconds); return result; &#125; &#125; public void Remove&lt;V&gt;(string key) &#123; MemoryCacheHelper&lt;V&gt;.GetInstance().Remove(key); &#125; &#125;&#125;","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"Sqlsugar","slug":"Sqlsugar","permalink":"https://guochen2.github.io/tags/Sqlsugar/"}]},{"title":"netcore2.2集成Swagger","slug":"netcore2.2/Swagger","date":"2020-02-15T05:58:45.000Z","updated":"2020-11-23T13:46:49.689Z","comments":true,"path":"2020/02/15/netcore2.2/Swagger/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/Swagger/","excerpt":"","text":"Nuget引用Swashbuckle.AspNetCore安装 https://www.cnblogs.com/yilezhu/p/9241261.html关键代码 services.AddSwaggerGen(c =&gt;&#123;c.SwaggerDoc(&quot;v1&quot;, new Info&#123;Version = &quot;v1&quot;,Title = &quot;EntityRiskUiBackendApi API&quot;,Description = &quot;EntityRiskUiBackendApi ASP.NET Core Web API&quot;,Contact = new Contact&#123;Name = &quot;webname&quot;,Email = string.Empty,Url = &quot;http://emergingriskanalytics.com/cn/index.aspx&quot;&#125;&#125;);// 为 Swagger JSON and UI设置xml文档注释路径var basePath = System.IO.Path.GetDirectoryName(typeof(Program).Assembly.Location);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）var xmlPath = System.IO.Path.Combine(basePath, xmlname);c.IncludeXmlComments(xmlPath);c.OperationFilter&lt;SwaggerOperationFilter&gt;(); // 手动高亮&#125;); 启用中间件服务生成Swagger作为JSON终结点app.UseSwagger(); 启用中间件服务对swagger-ui，指定Swagger JSON终结点app.UseSwaggerUI(c =&gt;&#123;c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;V1&quot;);&#125;); 项目生成配置里若要添加特殊的header public class SwaggerOperationFilter : IOperationFilter&#123;public void Apply(Operation operation, OperationFilterContext context)&#123;operation.Parameters = operation.Parameters ?? new List&lt;IParameter&gt;();var info = context.MethodInfo;context.ApiDescription.TryGetMethodInfo(out info);try&#123;Attribute attribute = info.GetCustomAttribute(typeof(Microsoft.AspNetCore.Authorization.AuthorizeAttribute));if (attribute != null)&#123;operation.Parameters.Add(new BodyParameter&#123;Name = &quot;auth&quot;,@In = &quot;header&quot;,Description = &quot;access_token&quot;,Required = true&#125;);&#125;&#125;catch&#123; &#125;&#125;&#125;","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"Swagger","slug":"Swagger","permalink":"https://guochen2.github.io/tags/Swagger/"}]},{"title":"netcore2.2集成链路追踪SkyWalking","slug":"netcore2.2/SkyWalking","date":"2020-02-15T05:42:14.000Z","updated":"2020-11-23T13:46:49.681Z","comments":true,"path":"2020/02/15/netcore2.2/SkyWalking/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/SkyWalking/","excerpt":"","text":"安装环境要想使用skywalking，首先得安装相关环境。本文以windows为例。 1 安装java sdk（如果不会配置java环境的话，请参考百度百科：https://jingyan.baidu.com/article/08b6a591bdb18314a80922a0.html） 2 java环境安装完成后，下载Elasticsearch进行安装 https://www.elastic.co/downloads/elasticsearch （本文使用skywalking 6.x版本，6.x版本对应使用ES 6.x版本，请自行下载对应版本） 3 下载完Elasticsearch 后将Elasticsearch解压到安装位置，以我电脑为例，我安装在D:\\Program Files 4 修改ES配置，进入ES文件下的：\\config，找到elasticsearch.yml，打开后修改如下配置： # ======================== Elasticsearch Configuration =========================## NOTE: Elasticsearch comes with reasonable defaults for most settings.# Before you set out to tweak and tune the configuration, make sure you# understand what are you trying to accomplish and the consequences.## The primary way of configuring a node is via this file. This template lists# the most important settings you may want to configure for a production cluster.## Please consult the documentation for further information on configuration options:# https://www.elastic.co/guide/en/elasticsearch/reference/index.html## ---------------------------------- Cluster -----------------------------------## Use a descriptive name for your cluster:#cluster.name: myskywalking## ------------------------------------ Node ------------------------------------## Use a descriptive name for the node:#node.name: node-1## Add custom attributes to the node:##node.attr.rack: r1## ----------------------------------- Paths ------------------------------------## Path to directory where to store the data (separate multiple locations by comma):#path.data: D:/Program Files/elasticsearch-6.6.2/path/to/data## Path to log files:#path.logs: D:/Program Files/elasticsearch-6.6.2/path/to/logs## ----------------------------------- Memory -----------------------------------## Lock the memory on startup:#bootstrap.memory_lock: false## Make sure that the heap size is set to about half the memory available# on the system and that the owner of the process is allowed to use this# limit.## Elasticsearch performs poorly when the system is swapping the memory.## ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host: 0.0.0.0http.port: 9200http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; http.cors.allow-methods: OPTIONS,HEAD,GET,POST,PUT,DELETEhttp.cors.allow-headers: &quot;X-Requested-With, Content-Type, Content-Length, X-Users&quot;## For more information, consult the network module documentation.## --------------------------------- Discovery ----------------------------------## Pass an initial list of hosts to perform discovery when new node is started:# The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]##discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]## Prevent the &quot;split brain&quot; by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):##discovery.zen.minimum_master_nodes: ## For more information, consult the zen discovery module documentation.## ---------------------------------- Gateway -----------------------------------## Block initial recovery after a full cluster restart until N nodes are started:##gateway.recover_after_nodes: 3## For more information, consult the gateway module documentation.## ---------------------------------- Various -----------------------------------## Require explicit names when deleting indices:##action.destructive_requires_name: true 修改好elasticsearch.yml文件后，打开cmd命令，进入到D:\\Program Files\\elasticsearch-6.6.2\\bin，bin文件夹下，输入如下命令： elasticsearch-service.bat install 将ES安装成windows，这样就可以方便系统重启后自动启动 然后将服务启动后即可5 接下来下载skywalking，http://skywalking.apache.org/downloads/6 选择版本为 ：6.0.0-GA 的下载 配置和效果1 在本地电脑中创建一个文件夹（注意：本人亲自躺过的坑，skywalking服务必须放在无空格的文件夹，比如：Program Files这个文件是绝对不能放的，不然服务运行的时候只会一闪而过，连log日志都不会生成，切记！切记！切记！） 我在D盘下创建了一个叫skyworkingService文件，路径如下：D:\\skyworkingService 将下好的skywalking解压到该目录下，命名为skywalking-apm-GA，路径如下：D:\\skyworkingService\\skywalking-apm-GA 接着，打开config文件，找到application.yml文件，修改其配置如下： # Licensed to the Apache Software Foundation (ASF) under one# or more contributor license agreements. See the NOTICE file# distributed with this work for additional information# regarding copyright ownership. The ASF licenses this file# to you under the Apache License, Version 2.0 (the# &quot;License&quot;); you may not use this file except in compliance# with the License. You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.cluster: standalone: # Please check your ZooKeeper is 3.5+, However, it is also compatible with ZooKeeper 3.4.x. Replace the ZooKeeper 3.5+ # library the oap-libs folder with your ZooKeeper 3.4.x library.# zookeeper:# nameSpace: $&#123;SW_NAMESPACE:&quot;&quot;&#125;# hostPort: $&#123;SW_CLUSTER_ZK_HOST_PORT:localhost:2181&#125;# #Retry Policy# baseSleepTimeMs: $&#123;SW_CLUSTER_ZK_SLEEP_TIME:1000&#125; # initial amount of time to wait between retries# maxRetries: $&#123;SW_CLUSTER_ZK_MAX_RETRIES:3&#125; # max number of times to retry# kubernetes:# watchTimeoutSeconds: $&#123;SW_CLUSTER_K8S_WATCH_TIMEOUT:60&#125;# namespace: $&#123;SW_CLUSTER_K8S_NAMESPACE:default&#125;# labelSelector: $&#123;SW_CLUSTER_K8S_LABEL:app=collector,release=skywalking&#125;# uidEnvName: $&#123;SW_CLUSTER_K8S_UID:SKYWALKING_COLLECTOR_UID&#125;# consul:# serviceName: $&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;# Consul cluster nodes, example: 10.0.0.1:8500,10.0.0.2:8500,10.0.0.3:8500# hostPort: $&#123;SW_CLUSTER_CONSUL_HOST_PORT:localhost:8500&#125;core: default: restHost: $&#123;SW_CORE_REST_HOST:0.0.0.0&#125; restPort: $&#123;SW_CORE_REST_PORT:12800&#125; restContextPath: $&#123;SW_CORE_REST_CONTEXT_PATH:/&#125; gRPCHost: $&#123;SW_CORE_GRPC_HOST:0.0.0.0&#125; gRPCPort: $&#123;SW_CORE_GRPC_PORT:11800&#125; downsampling: - Hour - Day - Month # Set a timeout on metric data. After the timeout has expired, the metric data will automatically be deleted. recordDataTTL: $&#123;SW_CORE_RECORD_DATA_TTL:90&#125; # Unit is minute minuteMetricsDataTTL: $&#123;SW_CORE_MINUTE_METRIC_DATA_TTL:90&#125; # Unit is minute hourMetricsDataTTL: $&#123;SW_CORE_HOUR_METRIC_DATA_TTL:36&#125; # Unit is hour dayMetricsDataTTL: $&#123;SW_CORE_DAY_METRIC_DATA_TTL:45&#125; # Unit is day monthMetricsDataTTL: $&#123;SW_CORE_MONTH_METRIC_DATA_TTL:18&#125; # Unit is monthstorage: # h2: # driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125; # url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db&#125; # user: $&#123;SW_STORAGE_H2_USER:sa&#125; elasticsearch: nameSpace: $&#123;SW_NAMESPACE:&quot;myskywalking&quot;&#125; clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:localhost:9200&#125; indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2&#125; indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0&#125; # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:2000&#125; # Execute the bulk every 2000 requests bulkSize: $&#123;SW_STORAGE_ES_BULK_SIZE:20&#125; # flush the bulk every 20mb flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:10&#125; # flush the bulk every 10 seconds whatever the number of requests concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:2&#125; # the number of concurrent requestsreceiver-register: default:receiver-trace: default: bufferPath: $&#123;SW_RECEIVER_BUFFER_PATH:../trace-buffer/&#125; # Path to trace buffer files, suggest to use absolute path bufferOffsetMaxFileSize: $&#123;SW_RECEIVER_BUFFER_OFFSET_MAX_FILE_SIZE:100&#125; # Unit is MB bufferDataMaxFileSize: $&#123;SW_RECEIVER_BUFFER_DATA_MAX_FILE_SIZE:500&#125; # Unit is MB bufferFileCleanWhenRestart: $&#123;SW_RECEIVER_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125; sampleRate: $&#123;SW_TRACE_SAMPLE_RATE:10000&#125; # The sample rate precision is 1/10000. 10000 means 100% sample in default.receiver-jvm: default:#service-mesh:# default:# bufferPath: $&#123;SW_SERVICE_MESH_BUFFER_PATH:../mesh-buffer/&#125; # Path to trace buffer files, suggest to use absolute path# bufferOffsetMaxFileSize: $&#123;SW_SERVICE_MESH_OFFSET_MAX_FILE_SIZE:100&#125; # Unit is MB# bufferDataMaxFileSize: $&#123;SW_SERVICE_MESH_BUFFER_DATA_MAX_FILE_SIZE:500&#125; # Unit is MB# bufferFileCleanWhenRestart: $&#123;SW_SERVICE_MESH_BUFFER_FILE_CLEAN_WHEN_RESTART:false&#125;#istio-telemetry:# default:#receiver_zipkin:# default:# host: $&#123;SW_RECEIVER_ZIPKIN_HOST:0.0.0.0&#125;# port: $&#123;SW_RECEIVER_ZIPKIN_PORT:9411&#125;# contextPath: $&#123;SW_RECEIVER_ZIPKIN_CONTEXT_PATH:/&#125;query: graphql: path: $&#123;SW_QUERY_GRAPHQL_PATH:/graphql&#125;alarm: default:telemetry: none: 修改完成后，进入到bin文件中，右键单击startup.bat，以管理员权限运行，即可看到如下弹框 弹出这两个框说明服务已经启动了 这个时候访问http://localhost:8080 即可看到如下界面：默认账号admin，密码admin，登录后看看到想要的监控数据和各服务直接的拓扑图，因为我的服务跑了一段时间，所以下面的界面是有数据的：2 由于启动skywalking后会弹出两个命令窗口，所以如果运维人员不小心关了窗口的话服务自然就停掉了，所以为了避免这种问题，我们还可以将bin文件夹下的oapService.bat和webappService.bat进行配置，如下： @REM@REM Licensed to the Apache Software Foundation (ASF) under one or more@REM contributor license agreements. See the NOTICE file distributed with@REM this work for additional information regarding copyright ownership.@REM The ASF licenses this file to You under the Apache License, Version 2.0@REM (the &quot;License&quot;); you may not use this file except in compliance with@REM the License. You may obtain a copy of the License at@REM@REM http://www.apache.org/licenses/LICENSE-2.0@REM@REM Unless required by applicable law or agreed to in writing, software@REM distributed under the License is distributed on an &quot;AS IS&quot; BASIS,@REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.@REM See the License for the specific language governing permissions and@REM limitations under the License.@echo offsetlocalset OAP_PROCESS_TITLE=Skywalking-Collectorset OAP_HOME=%~dp0%..set OAP_OPTS=&quot;-Xms256M -Xmx512M -Doap.logDir=%OAP_HOME%\\logs&quot;set CLASSPATH=%OAP_HOME%\\config;.;set CLASSPATH=%OAP_HOME%\\oap-libs\\*;%CLASSPATH%if defined JAVA_HOME ( set _EXECJAVA=&quot;%JAVA_HOME%\\bin\\javaw&quot;)if not defined JAVA_HOME ( echo &quot;JAVA_HOME not set.&quot; set _EXECJAVA=javaw)start &quot;%OAP_PROCESS_TITLE%&quot; %_EXECJAVA% &quot;%OAP_OPTS%&quot; -cp &quot;%CLASSPATH%&quot; org.apache.skywalking.oap.server.starter.OAPServerStartUpendlocaloapService.bat @REM@REM Licensed to the Apache Software Foundation (ASF) under one or more@REM contributor license agreements. See the NOTICE file distributed with@REM this work for additional information regarding copyright ownership.@REM The ASF licenses this file to You under the Apache License, Version 2.0@REM (the &quot;License&quot;); you may not use this file except in compliance with@REM the License. You may obtain a copy of the License at@REM@REM http://www.apache.org/licenses/LICENSE-2.0@REM@REM Unless required by applicable law or agreed to in writing, software@REM distributed under the License is distributed on an &quot;AS IS&quot; BASIS,@REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.@REM See the License for the specific language governing permissions and@REM limitations under the License.@echo offsetlocalset WEBAPP_PROCESS_TITLE=Skywalking-Webappset WEBAPP_HOME=%~dp0%..set JARPATH=%WEBAPP_HOME%\\webappset WEBAPP_LOG_DIR=%WEBAPP_HOME%\\logsif exist &quot;%WEBAPP_LOG_DIR%&quot; ( mkdir &quot;%WEBAPP_LOG_DIR%&quot;)set LOG_FILE_LOCATION=%WEBAPP_LOG_DIR%\\webapp.logif defined JAVA_HOME ( set _EXECJAVA=&quot;%JAVA_HOME%\\bin\\javaw&quot;)if not defined JAVA_HOME ( echo &quot;JAVA_HOME not set.&quot; set _EXECJAVA=javaw)start &quot;%WEBAPP_PROCESS_TITLE%&quot; %_EXECJAVA% -jar %JARPATH%/skywalking-webapp.jar --spring.config.location=%JARPATH%/webapp.yml --logging.file=%LOG_FILE_LOCATION%endlocalwebappService.bat 其实只是将文件里的java改成了javaw，这样就可以在后台运行了，保存后再次运行startup.bat文件，这个时候界面上会有个cmd命令界面一闪而过，不要慌，我们打开资源管理器看看，会发现进程中多了两个名为“javaw.exe”的进程 这个时候访问：http://localhost:8080 一样可以看到上面的ui界面！ 至此，skywalking的所有环境皆搭建完毕，接下来，在我们项目中添加skywalking的探针，方便skywalking收集我们项目中的数据 项目引用skywalking探针新建一个NetCore的webapi，然后在引用中引用 SkyAPM.Agent.AspNetCore 0.8.0 如图： 项目引用后，在项目中添加环境变量，可以使用skywalking 官网使用说明书中的命令，进入项目文件夹，给项目配置环境变量并运行 set ASPNETCORE_HOSTINGSTARTUPASSEMBLIES=SkyAPM.Agent.AspNetCoreset SKYWALKING__SERVICENAME=sample_appdotnet run 也可以自己手动给项目添加环境变量，本文以给项目添加环境变量为例： 在项目的Properties下找到launchSettings.json，按上图所示，在environmentVariables节点下分别添加一下环境变量： &quot;ASPNETCORE_HOSTINGSTARTUPASSEMBLIES&quot;: &quot;SkyAPM.Agent.AspNetCore&quot;,&quot;SKYWALKING__SERVICENAME&quot;: &quot;sample_app&quot; 添加完环境变量后，打开cmd，进入到项目根目录（比如我项目是在F:\\NEW_TMS\\OtherProject\\V1.0\\XiangYu.AreaModules\\WebApi.AreaServer 这个目录下，切记一定要进入到项目根目录，不然配置文件就生成到别的地方去了） 运行一下代码 安装SkyAPM.Dotnet.CLI： dotnet tool install -g SkyAPM.DotNet.CLI 然使用skyapm生成配置文件，命令如下： dotnet skyapm config sample_app 192.168.0.1:11800 其中192.168.0.1:11800是上面我们安装完成的skywalking服务端里配置的，将这个ip改成上面服务器的ip即可 执行完上面的命令后，项目下会生成一个名为skyapm.json的文件，其中的代码如下： &#123; &quot;SkyWalking&quot;: &#123; &quot;ServiceName&quot;: &quot;sample_app&quot;, &quot;Namespace&quot;: &quot;&quot;, &quot;HeaderVersions&quot;: [ &quot;sw6&quot; ], &quot;Sampling&quot;: &#123; &quot;SamplePer3Secs&quot;: -1, &quot;Percentage&quot;: -1.0 &#125;, &quot;Logging&quot;: &#123; &quot;Level&quot;: &quot;Information&quot;, &quot;FilePath&quot;: &quot;logs\\\\skyapm-&#123;Date&#125;.log&quot; &#125;, &quot;Transport&quot;: &#123; &quot;Interval&quot;: 3000, &quot;ProtocolVersion&quot;: &quot;v6&quot;, &quot;QueueSize&quot;: 30000, &quot;BatchSize&quot;: 3000, &quot;gRPC&quot;: &#123; &quot;Servers&quot;: &quot;192.168.0.1:11800&quot;, &quot;Timeout&quot;: 10000, &quot;ConnectTimeout&quot;: 10000, &quot;ReportTimeout&quot;: 600000 &#125; &#125; &#125;&#125; skyapm.json文件不一定要使用命令生成，也可自己在项目中创建一个名为skyapm.json的文件，然后将上面代码复制进去，修改其ip即可 在vs中右键单击skyapm.json，选择属性——》复制到输出目录——》如果较新则复制 然后选择控制台运行项目即可 运行代码后，项目根目录下会自动生成logs文件夹，该日志文件已skyapm- 为开头命名，打开后可以查看当前服务的skywalking探针运行情况， 日志如上图所示，即证明skywalking探针已经成功，接下来请求一下你的接口，然后进入skywalking的ui中看看你的成果吧！如果服务运行在docker中，请在docker-compose中设置环境变量，不然skywalking是运行不起来的，我们是将docker环境变量存入到一个.env文件中，如图 这样docker运行之后会就会有相关环境变量了","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"SkyWalking","slug":"SkyWalking","permalink":"https://guochen2.github.io/tags/SkyWalking/"}]},{"title":"netcore2.2集成nlog","slug":"netcore2.2/nlog","date":"2020-02-15T04:32:19.000Z","updated":"2020-11-23T13:46:49.697Z","comments":true,"path":"2020/02/15/netcore2.2/nlog/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/nlog/","excerpt":"","text":"Nuget引用NLog.Web.AspNetCore 注册using Microsoft.Extensions.Logging;using NLog.Web;using NLog.Extensions.Logging;public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)&#123; //引入Nlog配置文件 env.ConfigureNLog(&quot;nlog.config&quot;); //使用NLog作为日志记录工具 loggerFactory.AddNLog(); ...&#125; 调用using Microsoft.Extensions.Logging;using NLog; private Logger _logger; public BondNewsController(YfjkDbContext context,ILogger&lt;BondNewsController&gt; logger)&#123; _db = context; _logger = LogManager.GetCurrentClassLogger(); _logger.Debug(&quot;BondNewsController Init!!!!!!!!!!!!!!!&quot;);&#125; nlog.config&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; autoReload=&quot;true&quot; internalLogLevel=&quot;Warn&quot; internalLogFile=&quot;internal-nlog.txt&quot;&gt; &lt;!--define various log targets--&gt; &lt;targets&gt; &lt;!--write logs to file--&gt; &lt;!--&lt;target xsi:type=&quot;File&quot; name=&quot;allfile&quot; fileName=&quot;logs/all/nlog-all-$&#123;shortdate&#125;.log&quot; layout=&quot;$&#123;longdate&#125;||$&#123;logger&#125;||$&#123;uppercase:$&#123;level&#125;&#125;||$&#123;message&#125; $&#123;exception&#125;&quot; /&gt;--&gt; &lt;!--&lt;target name=&quot;ownFile-web&quot; xsi:type=&quot;File&quot; fileName=&quot;logs/my/nlog-my-$&#123;shortdate&#125;.log&quot; layout=&quot;$&#123;longdate&#125;||$&#123;logger&#125;||$&#123;uppercase:$&#123;level&#125;&#125;||$&#123;message&#125; $&#123;exception&#125;&quot; /&gt; &lt;target name=&quot;error_file&quot; xsi:type=&quot;File&quot; fileName=&quot;logs/my/nlog-error-$&#123;shortdate&#125;.log&quot; maxArchiveFiles=&quot;30&quot; layout=&quot;$&#123;longdate&#125; || $&#123;level:uppercase=false&#125; || $&#123;message&#125; $&#123;onexception:$&#123;exception:format=tostring&#125; $&#123;newline&#125; $&#123;stacktrace&#125; $&#123;newline&#125;&#125;&quot; /&gt;--&gt; &lt;target xsi:type=&quot;Null&quot; name=&quot;blackhole&quot; /&gt; &lt;target name=&quot;allfile&quot; xsi:type=&quot;File&quot; fileName=&quot;logs/all/nlog-all-$&#123;shortdate&#125;.log&quot; encoding=&quot;utf-8&quot;&gt; &lt;layout xsi:type=&quot;JsonLayout&quot;&gt; &lt;attribute name=&quot;@timestamp&quot; layout=&quot;$&#123;longdate&#125;&quot; /&gt; &lt;attribute name=&quot;level&quot; layout=&quot;$&#123;uppercase:$&#123;level&#125;&#125;&quot;/&gt; &lt;attribute name=&quot;logger&quot; layout=&quot;$&#123;logger&#125;&quot; /&gt; &lt;attribute name=&quot;content&quot; layout=&quot;$&#123;message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;exceptionmessage&quot; layout=&quot;$&#123;exception:format=Message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;stacktrace&quot; layout=&quot;$&#123;exception:format=StackTrace&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;/layout&gt; &lt;/target&gt; &lt;target name=&quot;info-file&quot; xsi:type=&quot;File&quot; fileName=&quot;logs/info/nlog-info-$&#123;shortdate&#125;.log&quot; &gt; &lt;layout xsi:type=&quot;JsonLayout&quot;&gt; &lt;attribute name=&quot;@timestamp&quot; layout=&quot;$&#123;longdate&#125;&quot; /&gt; &lt;attribute name=&quot;level&quot; layout=&quot;$&#123;uppercase:$&#123;level&#125;&#125;&quot;/&gt; &lt;attribute name=&quot;timelytype&quot; layout=&quot;$&#123;event-properties:timelytype&#125;&quot; /&gt; &lt;attribute name=&quot;timelycontent&quot; layout=&quot;$&#123;event-properties:timelycontent&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;logger&quot; layout=&quot;$&#123;logger&#125;&quot; /&gt; &lt;attribute name=&quot;content&quot; layout=&quot;$&#123;message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;/layout&gt; &lt;/target&gt; &lt;target name=&quot;error_file&quot; xsi:type=&quot;File&quot; fileName=&quot;logs/info/nlog-error-$&#123;shortdate&#125;.log&quot; encoding=&quot;utf-8&quot;&gt; &lt;layout xsi:type=&quot;JsonLayout&quot;&gt; &lt;attribute name=&quot;@timestamp&quot; layout=&quot;$&#123;longdate&#125;&quot; /&gt; &lt;attribute name=&quot;level&quot; layout=&quot;$&#123;uppercase:$&#123;level&#125;&#125;&quot;/&gt; &lt;attribute name=&quot;timelytype&quot; layout=&quot;$&#123;event-properties:timelytype&#125;&quot; /&gt; &lt;attribute name=&quot;timelycontent&quot; layout=&quot;$&#123;event-properties:timelycontent&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;logger&quot; layout=&quot;$&#123;logger&#125;&quot; /&gt; &lt;attribute name=&quot;content&quot; layout=&quot;$&#123;message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;exceptionmessage&quot; layout=&quot;$&#123;exception:format=Message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;attribute name=&quot;stacktrace&quot; layout=&quot;$&#123;exception:format=StackTrace&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; &lt;/layout&gt; &lt;/target&gt; &lt;target name=&quot;coloredConsole&quot; xsi:type=&quot;ColoredConsole&quot; useDefaultRowHighlightingRules=&quot;false&quot; layout=&quot;$&#123;longdate&#125;|$&#123;pad:padding=5:inner=$&#123;level:uppercase=true&#125;&#125;|$&#123;message&#125;&quot; &gt; &lt;highlight-row condition=&quot;level == LogLevel.Debug&quot; foregroundColor=&quot;DarkGray&quot; /&gt; &lt;highlight-row condition=&quot;level == LogLevel.Info&quot; foregroundColor=&quot;Gray&quot; /&gt; &lt;highlight-row condition=&quot;level == LogLevel.Warn&quot; foregroundColor=&quot;Yellow&quot; /&gt; &lt;highlight-row condition=&quot;level == LogLevel.Error&quot; foregroundColor=&quot;Red&quot; /&gt; &lt;highlight-row condition=&quot;level == LogLevel.Fatal&quot; foregroundColor=&quot;Red&quot; backgroundColor=&quot;White&quot; /&gt; &lt;/target&gt; &lt;/targets&gt; &lt;rules&gt; &lt;!--All logs, including from Microsoft--&gt; &lt;logger name=&quot;*&quot; minlevel=&quot;Trace&quot; writeTo=&quot;allfile&quot; /&gt; &lt;!--Skip Microsoft logs and so log only own logs--&gt; &lt;logger name=&quot;Microsoft.*&quot; minlevel=&quot;Trace&quot; writeTo=&quot;blackhole&quot; final=&quot;true&quot; /&gt; &lt;logger name=&quot;*&quot; level=&quot;Info&quot; writeTo=&quot;info-file&quot; /&gt; &lt;logger name=&quot;*&quot; level=&quot;Error&quot; writeTo=&quot;error_file&quot; /&gt; &lt;logger name=&quot;*&quot; minlevel=&quot;Trace&quot; writeTo=&quot;coloredConsole&quot; /&gt; &lt;/rules&gt;&lt;/nlog&gt; 添加自定义的日志内容&lt;attribute name=&quot;@timestamp&quot; layout=&quot;$&#123;longdate&#125;&quot; /&gt;&lt;attribute name=&quot;level&quot; layout=&quot;$&#123;uppercase:$&#123;level&#125;&#125;&quot;/&gt;&lt;attribute name=&quot;timelytype&quot; layout=&quot;$&#123;event-properties:timelytype&#125;&quot; /&gt;&lt;attribute name=&quot;timelycontent&quot; layout=&quot;$&#123;event-properties:timelycontent&#125;&quot; escapeUnicode=&quot;false&quot;/&gt;&lt;attribute name=&quot;logger&quot; layout=&quot;$&#123;logger&#125;&quot; /&gt;&lt;!--由于使用filebeat 这里不能使用message作为key--&gt;&lt;attribute name=&quot;content&quot; layout=&quot;$&#123;message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt;&lt;attribute name=&quot;exceptionmessage&quot; layout=&quot;$&#123;exception:format=Message&#125;&quot; escapeUnicode=&quot;false&quot;/&gt;&lt;attribute name=&quot;stacktrace&quot; layout=&quot;$&#123;exception:format=StackTrace&#125;&quot; escapeUnicode=&quot;false&quot;/&gt; 扩展using Castle.Core.Logging;using NLog;using System;using System.Collections.Generic;using System.Text;namespace EntityRiskUiBackendApi.Extensions&#123; /// &lt;summary&gt; /// NetCore Nlog扩展 /// &lt;/summary&gt; public static class NLoggerExtensions &#123; private static NLog.ILogger nlogger; static NLoggerExtensions() &#123; nlogger = LogManager.GetCurrentClassLogger(); &#125; /// &lt;summary&gt; /// 自定义日志 /// &lt;/summary&gt; /// &lt;param name=&quot;logger&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;message&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;keyValuePairs&quot;&gt;nlog配置里的event-properties自定义项&lt;/param&gt; public static void CustomInfoLog(this Microsoft.Extensions.Logging.ILogger logger, string message, Dictionary&lt;string, object&gt; keyValuePairs) &#123; if (keyValuePairs != null) &#123; LogEventInfo theEvent = new LogEventInfo(LogLevel.Info, logger.ToString(), message); foreach (var item in keyValuePairs) &#123; theEvent.Properties[item.Key] = item.Value; &#125; nlogger.Log(theEvent); &#125; &#125; /// &lt;summary&gt; /// 往钉钉推送的消息 /// &lt;/summary&gt; /// &lt;param name=&quot;logger&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;message&quot;&gt;&lt;/param&gt; public static void CustomInfoLogToDingDing(this Microsoft.Extensions.Logging.ILogger logger, string message) &#123; Dictionary&lt;string, object&gt; keyValuePairs = new Dictionary&lt;string, object&gt;(); keyValuePairs.Add(&quot;timelytype&quot;, &quot;dingding&quot;); keyValuePairs.Add(&quot;timelycontent&quot;, message); logger.CustomInfoLog(message, keyValuePairs); &#125; &#125;&#125; 扩展调用_logger.CustomInfoLogToDingDing($&quot;裁判系统用户&#123;userName&#125;登录成功了&quot;);","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"},{"name":"log","slug":"log","permalink":"https://guochen2.github.io/tags/log/"}]},{"title":"netcore2.2集成jwt","slug":"netcore2.2/jwt","date":"2020-02-15T04:25:08.000Z","updated":"2020-11-23T13:46:49.695Z","comments":true,"path":"2020/02/15/netcore2.2/jwt/","link":"","permalink":"https://guochen2.github.io/2020/02/15/netcore2.2/jwt/","excerpt":"","text":"NuGet引用System.IdentityModel.Tokens.Jwt appsettings.json里添加&quot;JwtSettings&quot;: &#123;&quot;Issuer&quot;: &quot;thisisissuer&quot;,&quot;Audience&quot;: &quot;thisisaudience&quot;,&quot;SecretKey&quot;: &quot;abcdefglsdkfjlsdkfd1&quot;&#125; 添加扩展 public static IServiceCollection AddJwtBearerProvider(this IServiceCollection services, IConfiguration Configuration)&#123;services.Configure&lt;JwtSettings&gt;(Configuration.GetSection(&quot;JwtSettings&quot;));JwtSettings setting = new JwtSettings();Configuration.Bind(&quot;JwtSettings&quot;, setting);services.AddAuthentication(option =&gt;&#123;option.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;option.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;&#125;).AddJwtBearer(config =&gt;&#123;//jwt默认是Authorization:&#x27;Bearer&#x27; Token 形式 自定义成 Bearerconfig.Events = new JwtBearerEvents()&#123;OnMessageReceived = context =&gt;&#123;var token = context.Request.Headers[&quot;auth&quot;];context.Token = token.FirstOrDefault();return Task.CompletedTask;&#125;&#125;;config.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters&#123;//NameClaimType = JwtClaimTypes.Name,//RoleClaimType = JwtClaimTypes.Role,//Token颁发机构ValidIssuer = setting.Issuer,//颁发给谁ValidAudience = setting.Audience,//这里的key要进行加密，需要引用Microsoft.IdentityModel.TokensIssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(setting.SecretKey)),ValidateIssuerSigningKey = true,ValidateIssuer = true, //Whether or not validate IssuerValidateAudience = true, //Whether or not validate Audience////是否验证Token有效期，使用当前时间与Token的Claims中的NotBefore和Expires对比ValidateLifetime = true,////允许的服务器时间偏移量ClockSkew = TimeSpan.FromSeconds(1)&#125;;&#125;);return services;&#125; 启用验证 此处会启用jwt验证app.UseAuthentication(); 登陆接口生成tokenvar claims = new Claim[] &#123;new Claim(ClaimTypes.Name,authInfo.un),//new Claim(ClaimTypes.Role, &quot;ma&quot;),//多个权限重复添加//new Claim(ClaimTypes.Role, &quot;mamama&quot;),//new Claim(&quot;EmployeeNumber&quot;, &quot;true&quot;),//添加用户访问权限new Claim(&quot;emp&quot;,JsonConvert.SerializeObject(authInfo)),new Claim(JwtRegisteredClaimNames.Sub, &quot;Client&quot;),new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),new Claim(JwtRegisteredClaimNames.Iat, $&quot;&#123;new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds()&#125;&quot;),new Claim(JwtRegisteredClaimNames.Nbf, $&quot;&#123;new DateTimeOffset(DateTime.Now).ToUnixTimeSeconds()&#125;&quot;) ,//这个就是过期时间，目前是8小时，可自定义，注意JWT有自己的缓冲过期时间new Claim(JwtRegisteredClaimNames.Exp, $&quot;&#123;new DateTimeOffset(DateTime.Now.AddHours(1)).ToUnixTimeSeconds()&#125;&quot;),&#125;;var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(setting.SecretKey));var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);var token = new JwtSecurityToken(setting.Issuer,setting.Audience,claims,signingCredentials: creds);string token=new JwtSecurityTokenHandler().WriteToken(token);","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"netcore","slug":"netcore","permalink":"https://guochen2.github.io/tags/netcore/"}]},{"title":"vuecli3注意事项","slug":"vue-1","date":"2020-01-07T07:46:45.000Z","updated":"2020-11-23T13:46:49.753Z","comments":true,"path":"2020/01/07/vue-1/","link":"","permalink":"https://guochen2.github.io/2020/01/07/vue-1/","excerpt":"","text":"关闭prefetchvuecli3.0默认会启用prefetch 会将所有js都放到index.html里导致首页加载时间较长，从vue.config.js里关闭https://cli.vuejs.org/zh/guide/html-and-static-assets.html#prefetch // vue.config.jsmodule.exports = &#123; chainWebpack: config =&gt; &#123; // 移除 prefetch 插件 config.plugins.delete(&#x27;prefetch&#x27;) // 或者 // 修改它的选项： config.plugin(&#x27;prefetch&#x27;).tap(options =&gt; &#123; options[0].fileBlacklist = options[0].fileBlacklist || [] options[0].fileBlacklist.push(/myasyncRoute(.)+?\\.js$/) return options &#125;) &#125;&#125; 设置输出目录// vue.config.jsmodule.exports = &#123; outputDir: &#x27;../src/wwwroot&#x27;, //可以设置相对当前目录得相对路径&#125; 打包关闭map// vue.config.jsmodule.exports = &#123; productionSourceMap: false,&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://guochen2.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://guochen2.github.io/tags/vue/"}]},{"title":"anaconda部分命令","slug":"python/python-anaconda-1","date":"2020-01-07T04:07:52.000Z","updated":"2020-11-23T13:46:49.737Z","comments":true,"path":"2020/01/07/python/python-anaconda-1/","link":"","permalink":"https://guochen2.github.io/2020/01/07/python/python-anaconda-1/","excerpt":"","text":"anaconda官网下载地址 window设置环境变量D:\\Anaconda3\\condabin 创建环境conda create --name python37 python=3.7 切换环境windowactivate python37 linux切换source activate python37 退出环境windowdeactivate linuxsource deactivate 显示已创建环境conda info -e 删除环境conda remove --name python37 --all 克隆环境 从AAA 克隆到BBBconda create -n BBB --clone AAA conda 修改国内源 查看当前的配置 conda config --show channels 若无提示 初始化配置 conda config 添加国内源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forgeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config --set show_channel_urls yes","categories":[{"name":"python","slug":"python","permalink":"https://guochen2.github.io/categories/python/"}],"tags":[{"name":"anaconda","slug":"anaconda","permalink":"https://guochen2.github.io/tags/anaconda/"}]},{"title":"pm2-安装与部分命令","slug":"pm2-1","date":"2020-01-07T03:53:44.000Z","updated":"2021-09-01T07:37:56.582Z","comments":true,"path":"2020/01/07/pm2-1/","link":"","permalink":"https://guochen2.github.io/2020/01/07/pm2-1/","excerpt":"","text":"安装npm i -g pm2 window安装并配置 pm2-windows-servicepm2-windows-service可以将 pm2 安装成 windows service, 达到开机运行的目的 npm i -g pm2-windows-service 添加pm2环境变量添加系统环境变量 PM2_HOME=D:.pm2右键 [我的电脑] - [属性] - [高级系统设置] - [环境变量] - 新建 [系统变量]名称PM2_HOME路径D:.pm2（这路径根据自己需要定） 安装服务以管理员权限打开新的命令行窗口,执行以下命令来安装服务 pm2-service-install Perform environment setup ? 选 n, 继续此时, PM2服务已安装成功并已启动, 可以通过 Wn+R来查看，输入services.msc即可看到服务,可直接关闭cmd窗口 卸载服务pm2-service-uninstall linux创建servicepm2 startup 启动node程序pm2 start app.js --name myapp 命令查看服务列表pm2 l 或 pm2 list 查看日志pm2 log id 监控程序性能pm2 monitpm2 imonit 启动bat等不需要node的程序pm2 start XXX.bat --interpreter none 启动特殊程序pm2 start npm -- run &lt;scriptname&gt;相当于 npm run &lt;scriptname&gt;-- 表示后面的是执行参数 示例bat或cmd需要执行以下命令 consul agent -server -datacenter=dc1 -bootstrap -data-dir ./data -node=n1 -bind 127.0.0.1 -client=0.0.0.0 -ui 通过pm2创建 在consul程序目录下执行cmd 若有环境变量，可以在任意地方执行 pm2 start consul.exe --name=consul -- agent -server -datacenter=dc1 -bootstrap -data-dir ./data -node=n1 -bind 127.0.0.1 -client=0.0.0.0 -ui 禁用程序结束或异常退出后的自动重启pm2 start app.js --no-autorestart pm2 备份与重启pm2 dump // 此时会备份 pm2 list 中的所有项目启动方式pm2 resurrect // 重启备份的所有项目 执行python程序 直接使用python解释器pm2 start a.py 创建一个sh文件 执行shstart.shpython a.py pm2 start start.sh 部分问题 通过pm2执行python可能会有 ‘gbk’ codec can’t encode character 的异常 通过node执行也会有这个异常，但是通过cmd直接运行python无异常 Anaconda管理的多环境python 需要先activate到指定的环境后 再执行pm2 start 即可","categories":[{"name":"运维","slug":"运维","permalink":"https://guochen2.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"pm2","slug":"pm2","permalink":"https://guochen2.github.io/tags/pm2/"}]},{"title":"tensorflow部分命令","slug":"python/python-tensorflow-1","date":"2020-01-07T02:14:58.000Z","updated":"2020-11-23T13:46:49.739Z","comments":true,"path":"2020/01/07/python/python-tensorflow-1/","link":"","permalink":"https://guochen2.github.io/2020/01/07/python/python-tensorflow-1/","excerpt":"","text":"检测Tensorflow可用设备(比如:显卡)python -c &quot;from tensorflow.python.client import device_lib;device_lib.list_local_devices()&quot;","categories":[{"name":"python","slug":"python","permalink":"https://guochen2.github.io/categories/python/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"https://guochen2.github.io/tags/tensorflow/"}]},{"title":"在Windows环境中使用Nginx, Consul, Consul Template搭建负载均衡和服务发现服务","slug":"nginx/nginx-consul-2","date":"2019-12-26T11:15:59.000Z","updated":"2020-11-23T13:46:49.700Z","comments":true,"path":"2019/12/26/nginx/nginx-consul-2/","link":"","permalink":"https://guochen2.github.io/2019/12/26/nginx/nginx-consul-2/","excerpt":"","text":"搭建负载均衡和服务发现服务的目的随着网站业务的不断提升，单个服务器的性能越来越难满足客户的业务需求，所以很多情况下，需要使用多服务器实例和负载均衡器来满足业务需要。Nginx#什么是Nginx#Nginx一款高性能的Web服务器，它既可以单独使用，也可以作为负载均衡器与其他Web服务器组合使用。 Nginx安装我们可用从Nginx官网上（ http://nginx.org/ ）下载最新的Windows版本压缩包。压缩包解压之后目录结构如下： Nginx的配置events &#123;worker_connections 1024;&#125;http &#123;upstream backend&#123;server 127.0.0.1:91 weight=1;server 127.0.0.1:92 weight=1;&#125;server&#123;location / &#123;proxy_pass http://backend;&#125;&#125;&#125; 其中upstream部分定义了对于HTTP请求的负载均衡。 当用户发送请求到 http://backend 的时候，Nginx会将这个请求转发到指定服务器IP列表中的一个。配置中的weight字段设置了指定服务器IP的权重，权重越高，转发的可能性越高。 常见问题Nginx默认会占用80端口，这个和IIS有冲突, 所以需要在nginx.conf中修改Nginx的默认端口 events &#123;worker_connections 1024;&#125;http &#123;upstream backend&#123;server 127.0.0.1:92 weight=1;server 127.0.0.1:93 weight=1;&#125;server&#123;listen 81;server_name localhost;location / &#123;proxy_pass http://backend;&#125;&#125;&#125; 当前网站有2个实例部署在IIS中，siteA IP 127.0.0.1:92, siteB IP 127.0.0.1:93。siteA和siteB都只有一个index.html页面。代码如下: &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Nginx Sample&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is site A&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Nginx Sample&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is site B&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; Nginx服务器使用81端口。 我们希望实现的效果是当用户访问http://127.0.0.1:81 时Nginx随机将请求转发到 http://127.0.0.1:92 或者 http://127.0.0.1:93 上 实现步骤a. 首先我们修改Nginx的配置文件 events &#123;worker_connections 1024;&#125;http &#123;upstream 127.0.0.1&#123;server 127.0.0.1:91 weight=1;server 127.0.0.1:92 weight=1;&#125;server&#123;listen 81;server_name localhost;location / &#123;proxy_pass http://127.0.0.1;&#125;&#125;&#125; 在命令行启动NginX 打开浏览器，输入http://127.0.0.1:81, 反复按F5刷新， 网站内容在siteA和siteB之间切换，这说明负载均衡已经成功启用。 Consul什么是ConsulConsul是一款用高性能服务注册/服务健康检查组件 Consul安装我们可以从官网(https://www.consul.io/downloads.html) 中对应版本的32位或64位程序。下载之后就是一个可执行文件consul.exe 如何启动Consul使用命令consul agent -dev, consul就会已开发模式启动（开发模式不会启用持久化，程序关闭后所有配置会丢失） Consul服务后台Consul服务启动之后，我们可以访问，http://localhost:8500 来访问Consul的管理后台，界面如下。在这个管理后台中可以查看Consul注册的所有服务和所有主机节点。 注册服务Consul服务启动之后，我们可以调用一些相应的Api来注册服务(相关Api列表 https://www.consul.io/api/index.html） 继续我们的实例现在我们尝试将之前的siteA, siteB注册到Consul中。 a. 首先这里我们去下载一个Curl程序（ https://curl.haxx.se/ ） 来调用Api(这里可以用POSTMAN代替) b. 创建2个json文件siteA.json, siteB.json。其内容如下siteA.json &#123; &quot;ID&quot;:&quot;webA&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;127.0.0.1&quot;, &quot;Port&quot;:92, &quot;EnableTagOverride&quot;:false&#125; siteB.json &#123; &quot;ID&quot;:&quot;webB&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;127.0.0.1&quot;, &quot;Port&quot;:93, &quot;EnableTagOverride&quot;:false&#125; 这里的Name就是服务名称，ID就是该服务的一个实例ID。 使用curl调用注册服务Api，将siteA和siteB注册到Consul中 curl --request PUT --data @siteA.json http://localhost:8500/v1/agent/service/registercurl --request PUT --data @siteB.json http://localhost:8500/v1/agent/service/register 回到Consul管理页面，我们会发现服务列表中会出现一个名为web的服务，这个服务有2个实例如果看到以上结果，就说明2个Web服务实例注册成功了。 添加服务健康检查将服务注册到Consul之后，得到的第一个好处就是可以借助Consul对每个服务实例进行健康检查。 继续修改我们的实例关闭之前打开的Consul服务，新开一个命令行窗口，使用consul agent -dev重新开启一个新的Consul服务 在siteA和siteB网站目录中，分别添加一个healthcheck.html文件，其内容如下 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Nginx Sample&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is health check page&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 修改之前的siteA.json和siteB.json siteA.json &#123; &quot;ID&quot;:&quot;webA&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;127.0.0.1&quot;, &quot;Port&quot;:92, &quot;Checks&quot;:[&#123; &quot;http&quot;:&quot;http://127.0.0.1:92/healthcheck.html&quot;, &quot;interval&quot;:&quot;5s&quot; &#125;], &quot;EnableTagOverride&quot;:false&#125; siteB.json &#123; &quot;ID&quot;:&quot;webB&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;127.0.0.1&quot;, &quot;Port&quot;:93, &quot;Checks&quot;:[&#123; &quot;http&quot;:&quot;http://127.0.0.1:93/healthcheck.html&quot;, &quot;interval&quot;:&quot;5s&quot; &#125;], &quot;EnableTagOverride&quot;:false&#125; 重新使用curl调用注册服务Api, 将siteA和siteB注册到Consul中 打开siteA目录，将healthcheck.html改名为healthcheck1.html（这个操作相当于模拟siteA所在的服务器崩溃, consul请求不到healthcheck.html文件了） 回到Consul管理界面，我们看一下结果，它会显示webA检查失败 将healthcheck1.html改名会healthcheck.html, 等待5秒后，返回consul界面中，webA已经变回检测通过状态。 Consul Template什么是Consul TemplateConsul Template是Consul的一个扩展组件，可以读取Consul中的服务配置，根据指定模板生成不同的配置文件。 所以这里我们就可以组合使用Consul, Consul Template来动态生成Nginx的配置文件, 并自动重启Nginx。 安装Consul Template我们可以从官网（https://releases.hashicorp.com/consul-template）中下载consul-template.exe 启动Consul Templateconsul-template -consul-addr 127.0.0.1:8500 -template “./2.tpl:./conf/nginx.conf:nginx -s reload” 这里-consul-addr参数是指定consul服务的地址, -template是指定consul template使用的模板，生成的新文件地址，以及生成新文件之后的执行的命令。 继续我们的案例现在我们添加一个新的siteC, ip为127.0.0.1:94, siteC中也只有index.html和healthcheck.html2个文件 a. 创建2.tpl, 文件内容如下, 这里使用的是consul-template的模板语法（相应语法介绍可以查看https://github.com/hashicorp/consul-template） events &#123; worker_connections 1024;&#125;http &#123; upstream 127.0.0.1&#123; &#123;&#123; range service &quot;web&quot; &#125;&#125; server &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125; weight=1;&#123;&#123; end &#125;&#125; &#125; server &#123; listen 81; server_name localhost; location / &#123; proxy_pass http://127.0.0.1; &#125; &#125;&#125; 使用命令 启动consul-template consul-template -consul-addr 127.0.0.1:8500 -template &quot;2.tpl:conf/nginx.conf:nginx -s reload&quot; &#123; &quot;ID&quot;:&quot;webC&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;127.0.0.1&quot;, &quot;Port&quot;:94, &quot;Checks&quot;:[&#123; &quot;http&quot;:&quot;http://127.0.0.1:94/healthcheck.html&quot;, &quot;interval&quot;:&quot;5s&quot; &#125;], &quot;EnableTagOverride&quot;:false&#125; 打开浏览器，输入http://localhost:81, 反复按F5刷新，你会发现siteC已经加入到了Nginx负载均衡配置中。然后我们进行一个测试，我们将siteA的healthcheck.html重命名为healthcheck1.html 回到刚才页面中继续按F5刷新，我们会发现现在只显示siteB和siteC的内容了，这是因为siteA已经被consul认定为不健康的服务，所以consul-template重新生成Nginx的配置文件，将siteA中配置文件中抹除，并重新启动了Nginx。","categories":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/categories/nginx/"},{"name":"consul","slug":"nginx/consul","permalink":"https://guochen2.github.io/categories/nginx/consul/"}],"tags":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"},{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/tags/nginx/"}]},{"title":"nginx+consul+consul-template","slug":"nginx/nginx-consul-1","date":"2019-12-26T11:12:00.000Z","updated":"2020-11-23T13:46:49.698Z","comments":true,"path":"2019/12/26/nginx/nginx-consul-1/","link":"","permalink":"https://guochen2.github.io/2019/12/26/nginx/nginx-consul-1/","excerpt":"","text":"下载consul-template https://releases.hashicorp.com/consul-template/0.20.0/ https://releases.hashicorp.com/consul-template/0.20.0/consul-template_0.20.0_windows_amd64.zip 开始监听 consul-template -consul-addr 127.0.0.1:8500 -template &quot;./consulconf/1.tpl:./consulconf/1.conf:nginx -s reload nginx配置stream stream &#123;upstream demo &#123; &#123;&#123; range service &quot;grpc&quot; &#125;&#125; server &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125; weight=1;&#123;&#123; end &#125;&#125; server 127.0.0.1:79 fail_timeout=0; &#125;server &#123; listen 12345; proxy_connect_timeout 10s; proxy_timeout 30s; proxy_pass demo; &#125;&#125; http upstream aa&#123; &#123;&#123; range service &quot;web&quot; &#125;&#125; server &#123;&#123; .Address &#125;&#125;:&#123;&#123; .Port &#125;&#125; weight=1;&#123;&#123; end &#125;&#125; server 127.0.0.1:79 fail_timeout=0;&#125;server &#123; listen 81; server_name localhost; location / &#123; proxy_pass http://aa; &#125;&#125; 删除consul服务 curl --request PUT http://127.0.0.1:8500/v1/agent/service/deregister/webB 添加服务 curl --request PUT --data @siteA.json http://localhost:8500/v1/agent/service/register &#123; &quot;ID&quot;:&quot;webA&quot;, &quot;Name&quot;:&quot;web&quot;, &quot;Tags&quot;:[], &quot;Address&quot;:&quot;192.168.2.101&quot;, &quot;Port&quot;:8080, &quot;Checks&quot;:[&#123; &quot;http&quot;:&quot;http://192.168.2.101:8080/1.html&quot;, &quot;interval&quot;:&quot;5s&quot; &#125;], &quot;EnableTagOverride&quot;:false&#125; 注意事项 consul 以服务方式启动 才会持久化数据 consul agent -server -ui -bootstrap-expect=1 -data-dir=./consul -node=agent-one -advertise=127.0.0.1 -bind=0.0.0.0 -client=0.0.0.0 -server：服务器模式 -ui:能webui展示 -bootstrap-expect：server为1时即选择server集群leader -data-dir:consul状态存储文件地址 -node：指定结点名 advertise：本地ip地址 -client:指定可访问这个服务结点的ip 注意 Cluster Addr集群地址是我们上面advertise指定的ip地址","categories":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/categories/nginx/"},{"name":"consul","slug":"nginx/consul","permalink":"https://guochen2.github.io/categories/nginx/consul/"}],"tags":[{"name":"consul","slug":"consul","permalink":"https://guochen2.github.io/tags/consul/"},{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/tags/nginx/"}]},{"title":"nginx常用指令","slug":"nginx/nginx-常用指令","date":"2019-12-26T11:05:12.000Z","updated":"2020-11-23T13:46:49.717Z","comments":true,"path":"2019/12/26/nginx/nginx-常用指令/","link":"","permalink":"https://guochen2.github.io/2019/12/26/nginx/nginx-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"","text":"替换 sub_filter指令： sub_filter string（原字符串） replacement（用于替换的字符串）; 用于设置需要使用说明字符串替换说明字符串.string是要被替换的字符串，replacement是 新的字符串，它里面可以带变量。 sub_filter_last_modified指令： sub_filter_last_modified on | off; 用于设置网页内替换后是否修改 可在nginx.conf的 http, server, location三个位置配置使 用，默认值是off； sub_filter_once指令：sub_filter_once on | off; 用于设置字符串替换次数，默认只替换一次。如果是on，默认只替换第一次匹配到的到字 符，如果是off，那么所有匹配到的字符都会被替换； sub_filter_types指令：sub_filter_types * 用于指定需要被替换的MIME类型,默认为“text/html”，如果制定为*，那么所有的；说明：以上指令可在nginx.conf的http, server, location三个位置配置使用；示例 location / &#123; sub_filter &quot;http://127.0.0.1:8110&quot; &quot;https://aaa.bbb.com&quot; ; sub_filter_once off; sub_filter_types application/atom+xml; sub_filter_last_modified on; proxy_pass http://127.0.0.1:8110; &#125; 限制并发同时限制ip和虚拟主机最大并发连接 http &#123; limit_conn_zone $binary_remote_addr zone=perip:10m; limit_conn_zone $server_name zone=perserver:10m; server &#123; location / &#123; limit_conn perip 10; limit_conn perserver 1000; limit_conn addr 5; #是限制每个IP只能发起5个连接 limit_rate 100k; #限速为 100KB/秒 &#125; &#125;&#125; 隐藏服务器信息移除X-AspNet-Version只需要在Web.config中增加这个配置节 &lt;httpRuntime enableVersionHeader=&quot;false&quot;/&gt; 移除nginx版本号http&#123; server_tokens off;&#125; 移除X-AspNetMvc-VersionMvcHandler.DisableMvcResponseHeader =true; 支持与请求端建立keepalivehttp &#123; keepalive_timeout 120s 120s; keepalive_requests 10000;&#125; 支持与负载后端的keepalivekeepalive详解 upstream s1&#123; server 172.26.154.20:8090 ; keepalive 1000; #重点需要添加&#125;server&#123; listen 4010; access_log logs/ai.log json; #location /s1/ &#123; location ~* ^\\/(.*)\\/* &#123; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://$1; proxy_http_version 1.1; ## 重点需要添加 proxy_set_header Connection &quot;&quot;; ##重点需要添加 &#125; &#125; 防止出现status 499http&#123; proxy_ignore_client_abort on;#代理服务端不要主要主动关闭客户端连接。&#125; 设置不缓存add_header Cache-Control no-store; 支持tsl1.2配置ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 注意 所有conf里的ssl配置都要改成这个 否则还是tsl1.0 支持websockethttp&#123; map $http_upgrade $connection_upgrade &#123; default upgrade; &#x27;&#x27; close; &#125; &#125; location / &#123; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; # 这是配置webpysessoin丢失的问题 fastcgi_param SCRIPT_NAME &quot;&quot;; &#125; 设置后端超时时间fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; proxy_connect_timeout 300; proxy_send_timeout 300; proxy_read_timeout 300; 默认配置 default_type application/octet-stream; server_names_hash_bucket_size 64; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; log_format json &#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27; &#x27;&quot;server_host&quot;:&quot;$server_addr&quot;,&#x27; &#x27;&quot;remote_addr&quot;:&quot;$remote_addr&quot;,&#x27; &#x27;&quot;remote_user&quot;:&quot;$remote_user&quot;,&#x27; &#x27;&quot;request&quot;:&quot;$request&quot;,&#x27; &#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27; &#x27;&quot;size&quot;:$body_bytes_sent,&#x27; &#x27;&quot;responsetime&quot;:$request_time,&#x27; &#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27; &#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27; &#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27; &#x27;&quot;url&quot;:&quot;$uri&quot;,&#x27; &#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27; &#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27; &#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27; &#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;; #access_log logs/access.log main;include ext/*.conf; sendfile on; #tcp_nopush on; add_header X-Frame-Options DENY; server_tokens off; #keepalive_timeout 0; keepalive_timeout 65; large_client_header_buffers 4 16k; client_max_body_size 30m; client_body_buffer_size 128k; #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; proxy_connect_timeout 300; proxy_send_timeout 300; proxy_read_timeout 300; #gzip模块设置 gzip on; #开启gzip压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0） gzip_comp_level 2; #压缩等级 gzip_types text/plain text/javascript application/x-javascript text/css application/xml; 更改路径转发后端代理例如 前端地址是 http://localhost/a/b/c后端服务器应该访问的地址是 /b/c location /a/ &#123; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://server/;&#125; upstream server&#123; server 47.104.237.193:10006;&#125;","categories":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://guochen2.github.io/tags/nginx/"}]},{"title":"搭建nuget服务器","slug":"netcore-nuget-1","date":"2019-12-26T10:54:14.000Z","updated":"2020-11-23T13:46:49.668Z","comments":true,"path":"2019/12/26/netcore-nuget-1/","link":"","permalink":"https://guochen2.github.io/2019/12/26/netcore-nuget-1/","excerpt":"","text":"新建一个项目这里使用3.0版本的NuGet.Server，需要 .Net Framework 4.6支持。然后引用NuGet.Server库包 Install-Package NuGet.Server 安装完成后，编译启动即可，就是这么简单，然后托管到IIS上。 上传库包的时候可能需要apikey，需要在web.config中设置。 部分坑1. 发布到服务器上后 如果使用了代理 则返回的内容里面地址是错的 需要替换成外部可访问的的 可以使用nginx来进行替换 location / &#123; sub_filter &quot;http://127.0.0.1:8110&quot; &quot;https://aaa.bbb.com&quot; ; sub_filter_once off; sub_filter_types application/atom+xml; sub_filter_last_modified on; proxy_pass http://127.0.0.1:8110; &#125; 如何使用NuGetPackageExplorer创建有依赖项的引用包https://blog.csdn.net/u011523479/article/details/82012340","categories":[{"name":"c#","slug":"c","permalink":"https://guochen2.github.io/categories/c/"}],"tags":[{"name":"nuget","slug":"nuget","permalink":"https://guochen2.github.io/tags/nuget/"}]},{"title":"Ubuntu 18 下安装zookeeper","slug":"ubuntu/ubuntu-zookeeper","date":"2019-12-25T14:02:14.000Z","updated":"2020-11-23T13:46:49.751Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-zookeeper/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-zookeeper/","excerpt":"","text":"下载zookeeper的压缩包 下载地址： http://apache.fayea.com/zookeeper/ 下载完成后，解压安装包，解压到/home/wsk1103/software/zookeeper目录下 tar zxvf zookeeper-3.4.12.tar.gz -C /home/wsk1103/software/zookeeper 拷贝zookeeper/conf/目录下的zoo_sample.cfg，重新命名为zoo.cfg 编辑该配置文件，gedit zoo.cfg 修改为 # The number of milliseconds of each tick# 心跳间隔，毫秒tickTime=2000# The number of ticks that the initial# synchronization phase can take# 配置zookeeper接受客户端初始化连接时最长能忍受多少个时间心跳间隔。initLimit=10# The number of ticks that can pass between# sending a request and getting an acknowledgement# 这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度。syncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.# 数据存放的位置dataDir=/home/wsk1103/sofrware/zookeeper/zookeeperData#日志存放的位置dataLogDir=/home/wsk1103/sofrware/zookeeper/zookeeperLog# the port at which the clients will connect# 服务器客户端的接口clientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns=60## Be sure to read the maintenance section of the# administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval=1# 2888,3888 are election port# 2888端口是zookeeper服务之间的通讯的端口，3888是zookeeper与其他应用程序通讯的端口。server.1=localhost:2888:3888 重点是中间添加了 dataDir=/home/wsk1103/sofrware/zookeeper/zookeeperDatadataLogDir=/home/wsk1103/sofrware/zookeeper/zookeeperLog 结尾添加了 server.1=localhost:2888:3888 根据中间添加的文件路径，创建相应的文件夹，并在zookeeperData目录下创建新的文件-myid，里面的内容为1 1表示当前的zookeeper定义为第一台服务器 新建文件命令： touch myid 启动zookeeper服务器，进入zookeeper/bin目录，执行 ./zkServer.sh start 检验服务器命令 ./zkCli.sh -server localhost:2181 停止服务器命令 ./zkServer.sh stop","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"},{"name":"zookeeper","slug":"linux/zookeeper","permalink":"https://guochen2.github.io/categories/linux/zookeeper/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"},{"name":"zookeeper","slug":"zookeeper","permalink":"https://guochen2.github.io/tags/zookeeper/"}]},{"title":"ubuntu18.04下Kafka安装与部署","slug":"ubuntu/ubuntu-kafka","date":"2019-12-25T13:59:39.000Z","updated":"2020-11-23T13:46:49.750Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-kafka/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-kafka/","excerpt":"","text":"安装Java更新软件包 sudo apt-get update 安装openjdk-8-jdk sudo apt-get install openjdk-8-jdk 查看java版本，看看是否安装成功 wzj@wzj-ThinkPad-T61:~$ java -versionjava version &quot;1.8.0_171&quot;Java(TM) SE Runtime Environment (build 1.8.0_171-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode) 安装Kafka下载地址：https://kafka.apache.org/downloadsubuntu下可以用wget直接下载，我是下载到了/home/wzj/kafka目录 wget http://mirrors.shuosc.org/apache/kafka/1.0.0/kafka_2.11-1.0.0.tgz 解压 tar -zxvf kafka_2.11-1.0.0.tgz 创建日志存储目录 cd kafka/mkdir logs-1 进入kafka解压目录，修改kafka-server 的配置文件 vim config/server.properties 修改配置文件中21、31、36和60行 broker.id=1listeners=PLAINTEXT://本机IP:9092advertised.listeners=PLAINTEXT://本机ip:9092log.dirs=/home/wzj/kafka/logs-1 启动Kafka服务 使用kafka-server-start.sh启动 kafka 服务 bin/kafka-server-start.sh config/server.properties","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"},{"name":"kafka","slug":"linux/kafka","permalink":"https://guochen2.github.io/categories/linux/kafka/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"},{"name":"kafka","slug":"kafka","permalink":"https://guochen2.github.io/tags/kafka/"}]},{"title":"ubuntu部分基本命令","slug":"ubuntu/ubuntu-6","date":"2019-12-25T13:56:32.000Z","updated":"2020-11-23T13:46:49.747Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-6/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-6/","excerpt":"","text":"文件查找程序执行目录ps -ef | grep nginxcd /proc/$pid 例如 cd /proc/13198ll ps -ef |grep redisps -e 查看所有程序的pidcd /proc/pid 通过ll 查看信息 其中exe是执行目录cwd符号链接的就是进程3093的运行目录；exe符号连接就是执行程序的绝对路径；cmdline就是程序运行时输入的命令行命令；本例为：。/cbscpu记录了进程可能运行在其上的cpu；显示虚拟的cpu信息environ记录了进程运行时的环境变量fd目录下是进程打开或使用的文件的符号连接 文件夹du -h --max-depth=1 查看当前文件夹大小 会列出一级目录du -h --max-depth=1 /home 查看指定目录大小 会列出一级目录 磁盘df -h 查看磁盘占用信息 系统信息Linux内核版本cat /proc/versionuname -a Linux系统版本lsb_release -a 列出所有版本信息 这个命令适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版。cat /etc/redhat-release，这种方法只适合Redhat系的Linux：cat /etc/issue，此命令也适用于所有的Linux发行版。 重启命令rebootshutdown -r now 立刻重启shutdown -r 10 过10分钟自动重启shutdown -r 20:35 在时间为20:35时候重启如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启 关机命令halt 立刻关机（一般加-p 关闭电源）poweroff 立刻关机shutdown -h now 立刻关机shutdown -h 10 10分钟后自动关机如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消关机 查看TCP端口状态netstat -ano -t 结束进程pkill 进程名 killall 进程名kill -9 $(ps -ef|grep 进程名关键字|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;)这个是利用管道和替换将 进程名对应的进程号提出来作为kill的参数。kill -9 $(pidof 进程名关键字)","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"}]},{"title":"ubuntu 提升普通用户的root权限","slug":"ubuntu/ubuntu-5","date":"2019-12-25T13:52:36.000Z","updated":"2020-11-23T13:46:49.746Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-5/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-5/","excerpt":"","text":"编辑passwd文件sudo vim /etc/passwd 找到你想提权的用户（比如test），将用户名后面的数字改成0test:x:1000:1000::/home/test 修改权限test:x:0:0::/home/test 也可以改得和root一样 只要第一个不b变 重启电脑，登录test账户。reboot 设置后 可能无法登陆ssh 需要设置 vi /etc/ssh/sshd_config 找到 并编辑为# Authentication:LoginGraceTime 120#PermitRootLogin without-passwordPermitRootLogin yesStrictModes yes 保存后重启服务 /etc/init.d/ssh restart 或者 service ssh restart","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"},{"name":"root","slug":"root","permalink":"https://guochen2.github.io/tags/root/"}]},{"title":"Ubuntu使用apt-get下载速度慢的解决方法","slug":"ubuntu/ubuntu-4","date":"2019-12-25T13:50:23.000Z","updated":"2020-11-23T13:46:49.744Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-4/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-4/","excerpt":"","text":"查看所用的源sudo vim /etc/apt/sources.list 由于安装的Ubuntu Server 16.04.1 LTS是英文版的，软件源就默认都是 us.archive.ubuntu.com（英国） 的，所以很慢。 # deb cdrom:[Ubuntu-Server 16.04.1 LTS _Xenial Xerus_ - Release amd64 (20160719)]/ xenial main restricted#deb cdrom:[Ubuntu-Server 16.04.1 LTS _Xenial Xerus_ - Release amd64 (20160719)]/ xenial main restricted# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to# newer versions of the distribution.deb http://us.archive.ubuntu.com/ubuntu/ xenial main restricted# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted## Major bug fix updates produced after the final release of the## distribution.deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates main restricted## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu## team. Also, please note that software in universe WILL NOT receive any## review or updates from the Ubuntu security team.deb http://us.archive.ubuntu.com/ubuntu/ xenial universe# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial universedeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates universe## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu## team, and may not be under a free licence. Please satisfy yourself as to## your rights to use the software. Also, please note that software in## multiverse WILL NOT receive any review or updates from the Ubuntu## security team.deb http://us.archive.ubuntu.com/ubuntu/ xenial multiverse# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial multiversedeb http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-updates multiverse## N.B. software from this repository may not have been tested as## extensively as that contained in the main release, although it includes## newer versions of some applications which may provide useful features.## Also, please note that software in backports WILL NOT receive any review## or updates from the Ubuntu security team.deb http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse# deb-src http://us.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse## Uncomment the following two lines to add software from Canonical&#x27;s## &#x27;partner&#x27; repository.## This software is not part of Ubuntu, but is offered by Canonical and the## respective vendors as a service to Ubuntu users.# deb http://archive.canonical.com/ubuntu xenial partner# deb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://security.ubuntu.com/ubuntu xenial-security main restricted# deb-src http://security.ubuntu.com/ubuntu xenial-security main restricteddeb http://security.ubuntu.com/ubuntu xenial-security universe# deb-src http://security.ubuntu.com/ubuntu xenial-security universedeb http://security.ubuntu.com/ubuntu xenial-security multiverse# deb-src http://security.ubuntu.com/ubuntu xenial-security multiverse 为了提高下载速度，将源改为国内的 cn.archive.ubuntu.com ，现在 cn.archive.ubuntu.com 指向阿里云的开源镜像站 mirrors.aliyun.com，下载速度很快。 重命名原来的源作为备份：sudo mv /etc/apt/sources.list sources.list_backup 新建一个sources.list文件sudo vim /etc/apt/sources.list 输入如下内容并保存退出：deb http://cn.archive.ubuntu.com/ubuntu/ xenial main restricteddeb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates main restricteddeb http://cn.archive.ubuntu.com/ubuntu/ xenial universedeb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates universedeb http://cn.archive.ubuntu.com/ubuntu/ xenial multiversedeb http://cn.archive.ubuntu.com/ubuntu/ xenial-updates multiversedeb http://cn.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiversedeb http://security.ubuntu.com/ubuntu xenial-security main restricteddeb http://security.ubuntu.com/ubuntu xenial-security universedeb http://security.ubuntu.com/ubuntu xenial-security multiverse 更新apt软件源：sudo apt-get update","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"},{"name":"apt-get","slug":"apt-get","permalink":"https://guochen2.github.io/tags/apt-get/"}]},{"title":"ubuntu 无法使用 SSH root 账户远程访问","slug":"ubuntu/ubuntu-3","date":"2019-12-25T13:21:15.000Z","updated":"2020-11-23T13:46:49.743Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-3/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-3/","excerpt":"","text":"系统启用root 并设置密码sudo passwd root 首先，确保服务器在安装过程中，选择安装openssh软件。如没有进行安装，请使用以下命令进行安装：apt-get install -y openssh-server 安装完成后，使用root登录系统 编辑 SSH 的文件 将PermitRootLogin 的值改为yes 因为为root账户设置了密码，所以还要更改PermitEmptyPasswords为 no vim /etc/ssh/sshd_config 然后重启ssh服务service ssh restart 如果没有services/etc/init.d/ssh startsudo /etc/init.d/ssh restart","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://guochen2.github.io/tags/ssh/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"}]},{"title":"ubuntu安装jdk的两种方式","slug":"ubuntu/ubuntu-2","date":"2019-12-25T13:11:21.000Z","updated":"2020-11-23T13:46:49.743Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-2/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-2/","excerpt":"","text":"通过ppa(源) 方式安装. 通过官网下载安装包安装. 这里推荐第1种,因为可以通过 apt-get upgrade 方式方便获得jdk的升级 使用ppa/源方式安装添加ppasudo add-apt-repository ppa:webupd8team/javasudo apt-get update 安装oracle-java-installersudo apt-get install oracle-java8-installer 安装器会提示你同意 oracle 的服务条款,选择 ok 然后选择yes 即可 如果你懒,不想自己手动点击.也可以加入下面的这条命令,默认同意条款: JDK8 默认选择条款 echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections 如果你因为防火墙或者其他原因,导致installer 下载速度很慢,可以中断操作.然后下载好相应jdk的tar.gz 包,放在: /var/cache/oracle-jdk8-installer (jdk8)下面,然后安装一次installer. installer 则会默认使用 你下载的tar.gz包 设置系统默认jdksudo update-java-alternatives -s java-8-oracle 如果即安装了jdk7,又安装了jdk8,要实现两者的切换,可以: jdk8 切换到jdk7 sudo update-java-alternatives -s java-7-oracle jdk7 切换到jdk8 sudo update-java-alternatives -s java-8-oracle 测试jdk 是是否安装成功java -versionjavac -version 直接下载jdk压缩包方式安装(这里只介绍jdk7的,jdk8 的原理完全一致) 官网下载JDK 解压缩,放到指定目录 配置环境变量 设置系统默认JDK 测试jdk 官网下载JDK 地址: http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html 选择相应的 .gz包下载 解压缩,放到指定目录(以jdk-7u60-linux-x64.gz为例)sudo mkdir /usr/lib/jvmsudo tar -zxvf jdk-7u60-linux-x64.gz -C /usr/lib/jvm 修改环境变量: sudo vim ~/.bashrc 文件的末尾追加下面内容: #set oracle jdk environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.7.0_60 ## 这里要注意目录要换成自己解压的jdk 目录export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 使环境变量马上生效 source ~/.bashrc 设置系统默认jdk 版本sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_60/bin/java 300sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_60/bin/javac 300sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.7.0_60/bin/jar 300sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.7.0_60/bin/javah 300sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.7.0_60/bin/javap 300 然后执行: sudo update-alternatives --config java 若是初次安装jdk,会有下面的提示 There is only one alternative in link group java (providing /usr/bin/java): /usr/lib/jvm/jdk1.7.0_60/bin/java 否者,选择合适的jdk 测试jdkjava -versionjava version &quot;1.7.0_60&quot; Java(TM) SE Runtime Environment (build 1.7.0_60-b19) Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode) 参考文章: http://www.webupd8.org/2012/01/install-oracle-java-jdk-7-in-ubuntu-via.html http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html Ubuntu 18.04 安装java8 添加ppasudo add-apt-repository ppa:webupd8team/javasudo apt-get update 安装oracle-java-installersudo apt-get install oracle-java8-installer 设置系统默认jdksudo update-java-alternatives -s java-8-oracle java安装测试java -versionjavac -version","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"},{"name":"jdk","slug":"jdk","permalink":"https://guochen2.github.io/tags/jdk/"}]},{"title":"Ubuntu 14.04 “无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关” 解决办法","slug":"ubuntu/ubuntu-1","date":"2019-12-25T13:02:07.000Z","updated":"2020-11-23T13:46:49.742Z","comments":true,"path":"2019/12/25/ubuntu/ubuntu-1/","link":"","permalink":"https://guochen2.github.io/2019/12/25/ubuntu/ubuntu-1/","excerpt":"","text":"ubuntu下apt-get install 安装软件， 报 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系 这个错误出现的主要原因是，系统中已经安装了被依赖的包的高版本。例如在我安装 openssh-server 时，有一个对于 openssh-client 的依赖，但是我系统中已经提前安装了openssh-client 这个包，并且版本高于所要求的这个版本，导致安装失败。 解决方法之一：安装制定版本号的被依赖包： sudo apt-get install openssh-client=1:7.2p2-4ubuntu2.4 解决方法之二：使用aptitude进行安装 首先需要安装 aptitude：sudo apt-get install aptitude 然后使用 aptitude 安装包：sudo aptitude install openssh-server 据说如果方案中仍然存在未解决的依赖，可以选择 n，aptitude 会重新计算可行方案，包括对已存在的包进行降级等。 另外我自己福至心灵想到的解决方法： 先卸载已安装好的被依赖包即 openssh-client，然后再次安装 openssh-server。这时因为系统中已经没有了openssh-client，因此apt-get 会首先选择合适版本的 openssh-client 安装，然后再安装 openssh-server。 卸载安装好的包，及其依赖的包，及配置文件： sudo apt-get --purge remove openssh-server 另外，apt-get 还可能会因为 source 错误而下载失败，这个时候可以手工更改 source 列表，指定下载源。 源列表维护在：/etc/apt/sources.list 中。可以备份后手工更改。 此外，也可以在“系统设置”-“软件和更新”-“ubuntu软件”中更改 apt-get update 更新源列表， apt-get upgrade 更新已安装的包到最新版本 apt-get dist-upgrade 升级系统","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://guochen2.github.io/tags/ubuntu/"}]},{"title":"suse11","slug":"suse11","date":"2019-12-25T10:00:00.000Z","updated":"2020-11-23T13:46:49.740Z","comments":true,"path":"2019/12/25/suse11/","link":"","permalink":"https://guochen2.github.io/2019/12/25/suse11/","excerpt":"","text":"关闭防火墙service SuSEfirewall2_setup stopservice SuSEfirewall2_init stop 取消开机启动防火墙chkconfig SuSEfirewall2_init offchkconfig SuSEfirewall2_setup off 启动ssh服务 修改sshd_config文件，命令为：vi /etc/ssh/sshd_config 将#PasswordAuthentication no的注释去掉，并且将NO修改为YES 将#PermitRootLogin yes的注释去掉 重新启动SSH服务，命令为：/etc/init.d/sshd restart 验证SSH服务状态，命令为：/etc/init.d/sshd status 安装GCC、G++ 搜索软件包 zypper se gcc-c++或zypper se gcc 安装GCC软件包 zypper install gcc-c++或zypper install gcc","categories":[{"name":"linux","slug":"linux","permalink":"https://guochen2.github.io/categories/linux/"}],"tags":[{"name":"suse","slug":"suse","permalink":"https://guochen2.github.io/tags/suse/"}]}]}